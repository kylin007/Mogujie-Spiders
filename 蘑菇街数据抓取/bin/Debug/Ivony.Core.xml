<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Core</name>
    </assembly>
    <members>
        <member name="T:Ivony.Data.IPagingData">
            <summary>
            定义一个数据分页器
            </summary>
        </member>
        <member name="M:Ivony.Data.IPagingData.GetPage(System.Int32)">
            <summary>
            获取分页后的数据
            </summary>
            <param name="pageIndex">页序号</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.IPagingData.Count">
            <summary>
            获取数据总数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Data.IPagingData.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="T:Ivony.Data.IPagingData`1">
            <summary>
            定义一个数据分页器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ivony.Data.IPagingData`1.GetPage(System.Int32)">
            <summary>
            获取分页后的数据
            </summary>
            <param name="pageIndex">页序号</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Data.IPagingDataSource">
            <summary>
            可分页数据源
            </summary>
        </member>
        <member name="M:Ivony.Data.IPagingDataSource.CreatePaging(System.Int32)">
            <summary>
            创建数据分页器
            </summary>
            <param name="pageSize">页大小</param>
            <returns>数据分页器</returns>
        </member>
        <member name="T:Ivony.Data.IPagingDataSource`1">
            <summary>
            可分页数据源
            </summary>
            <typeparam name="T">数据元素类型</typeparam>
        </member>
        <member name="M:Ivony.Data.IPagingDataSource`1.CreatePaging(System.Int32)">
            <summary>
            创建分页器
            </summary>
            <param name="pageSize">分页大小</param>
            <returns>数据分页器</returns>
        </member>
        <member name="T:Ivony.Data.PagingExtension">
            <summary>
            提供分页器和分页数据源的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Data.PagingExtension.Take``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从序列的指定位置返回指定数量的连续元素
            </summary>
            <typeparam name="TSource">list 中的元素的类型</typeparam>
            <param name="list">要从其返回元素的序列</param>
            <param name="start">要返回的元素在序列的开始位置</param>
            <param name="count">要返回的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.CopySegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            从数组中拷贝出一个片段
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="source">要从其拷贝的源数组</param>
            <param name="start">片段的开始位置</param>
            <param name="size">片段的大小</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.MaxPages(Ivony.Data.IPagingData)">
            <summary>
            获取分页器的最大页数
            </summary>
            <param name="pagingData">数据分页器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.ToPagingSource``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从 IEnumerable&lt;T&gt; 创建一个 IPagingDataSource&lt;T&gt;。
            </summary>
            <typeparam name="T">source 中的元素的类型</typeparam>
            <param name="source">数据源</param>
            <returns>分页数据源</returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.ToPagingSource``1(System.Linq.IQueryable{``0})">
            <summary>
            从 IQueryable&lt;T&gt; 创建一个 IPagingDataSource&lt;T&gt;。
            </summary>
            <typeparam name="T">source中的元素类型</typeparam>
            <param name="source">数据源</param>
            <returns>分页数据源</returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.Select``2(Ivony.Data.IPagingData{``0},System.Func{``0,``1})">
            <summary>
            对分页数据中的每一项进行指定映射操作，得到一个新的分页数据
            </summary>
            <typeparam name="TSource">源分页数据类型</typeparam>
            <typeparam name="TResult">映射后的类型</typeparam>
            <param name="source">数据源</param>
            <param name="selector">映射函数</param>
            <returns>执行映射操作后的分页数据</returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.PageSelect``2(Ivony.Data.IPagingData{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            对分页数据中的每一页进行指定映射操作，得到一个新的分页数据
            </summary>
            <typeparam name="TSource">源分页数据类型</typeparam>
            <typeparam name="TResult">映射后的类型</typeparam>
            <param name="source">数据源</param>
            <param name="pageSelector">映射函数</param>
            <returns>执行映射操作后的分页数据</returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.Select``2(Ivony.Data.IPagingDataSource{``0},System.Func{``0,``1})">
            <summary>
            对分页数据源中的每一项进行指定映射操作，得到一个新的分页数据源
            </summary>
            <typeparam name="TSource">源分页数据类型</typeparam>
            <typeparam name="TResult">映射后的类型</typeparam>
            <param name="source">数据源</param>
            <param name="selector">映射函数</param>
            <returns>执行映射操作后的分页数据</returns>
        </member>
        <member name="M:Ivony.Data.PagingExtension.PageSelect``2(Ivony.Data.IPagingDataSource{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            对分页数据源中的每一页进行指定映射操作，得到一个新的分页数据源
            </summary>
            <typeparam name="TSource">源分页数据类型</typeparam>
            <typeparam name="TResult">映射后的类型</typeparam>
            <param name="source">数据源</param>
            <param name="pageSelector">映射函数</param>
            <returns>执行映射操作后的分页数据</returns>
        </member>
        <member name="T:Ivony.Data.PagingSourceWrapper`1">
            <summary>
            分页数据源包裹类型，用于将列表数据包裹为为分页数据源
            </summary>
            <typeparam name="T">数据项类型</typeparam>
        </member>
        <member name="T:Ivony.Data.EnumerableWrapper`1">
            <summary>
            为包装 IEnumerable&lt;T&gt; 提供辅助基类
            </summary>
            <typeparam name="T">序列的元素类型</typeparam>
        </member>
        <member name="M:Ivony.Data.EnumerableWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            创建 IEnumerable&lt;T&gt; 的包装
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:Ivony.Data.PagingSourceWrapper`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            从一个 IList&lt;T&gt; 列表数据源创建分页数据源
            </summary>
            <param name="source">列表数据源</param>
        </member>
        <member name="M:Ivony.Data.PagingSourceWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            从一个 IEnumerable&lt;T&gt; 列表数据源创建分页数据源
            </summary>
            <param name="source">列表数据源</param>
        </member>
        <member name="M:Ivony.Data.PagingSourceWrapper`1.CreatePaging(System.Int32)">
            <summary>
            创建分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <returns>分好页的数据</returns>
        </member>
        <member name="T:Ivony.Data.QueryPagingSourceWrapper`1">
            <summary>
            分页数据源包裹类型，用于将 IQueryable&lt;T&gt; 数据源包裹为为分页数据源
            </summary>
            <typeparam name="T">数据项类型</typeparam>
        </member>
        <member name="M:Ivony.Data.QueryPagingSourceWrapper`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            从一个 IQueryable&lt;T&gt; 数据源创建分页数据源
            </summary>
            <param name="source">数据源</param>
        </member>
        <member name="M:Ivony.Data.QueryPagingSourceWrapper`1.CreatePaging(System.Int32)">
            <summary>
            创建分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <returns>分好页的数据</returns>
        </member>
        <member name="T:Ivony.Fluent.ConvertExtensions">
            <summary>
            提供类型转换扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.CastTo``1(System.Object)">
            <summary>
            将对象强制类型转换为 T 类型。
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="obj">要转换的对象</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.ConvertTo``1(System.Object)">
            <summary>
            尝试将对象转换为指定的类型
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="value">要转换的对象</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.IfNull``1(``0,``0)">
            <summary>
            若值是 null 则使用指定值代换
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">原始值</param>
            <param name="defaultValue">当值为 null 时用于代换的默认值</param>
            <returns>原始值，当原始值不为 null 或 DBbNull，否则使用代换的默认值</returns>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.IfNull(System.Object,System.Object)">
            <summary>
            若值是 null 则使用指定值代换
            </summary>
            <param name="value">原始值</param>
            <param name="defaultValue">当值为 null 时用于代换的默认值</param>
            <returns>当原始值不为 null 或 DBbNull，返回原始值，否则返回代换的默认值</returns>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.IfNull``2(``0,``1,System.Func{``0,``1})">
            <summary>
            若值是 null 则使用指定值代换
            </summary>
            <typeparam name="TInput">值类型</typeparam>
            <typeparam name="TOut">输出值类型</typeparam>
            <param name="value">原始值</param>
            <param name="defaultValue">当值为 null 时用于代换的默认值</param>
            <param name="converter">当值不为空时，对值进行类型转换的转换器。</param>
            <returns>当原始值不为 null 或 DBbNull，返回转换后的原始值，否则返回代换的默认值</returns>
        </member>
        <member name="M:Ivony.Fluent.ConvertExtensions.ToPropertiesMap(System.Object)">
            <summary>
            将对象所有属性转换为对象图
            </summary>
            <param name="obj">要转换为对象图的对象</param>
            <returns>对象图</returns>
        </member>
        <member name="T:Ivony.Fluent.DisposableHelper">
            <summary>
            为自动销毁对象逻辑提供流畅的写法的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Fluent.DisposableHelper.AsDisposable``1(``0,System.Action{``0})">
            <summary>
            对没有实现 IDisposable 的对象返回实现了 IDisposable 的包装。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">要包装的对象</param>
            <param name="disposeMethod">Dispose方法</param>
            <returns>包装对象</returns>
        </member>
        <member name="T:Ivony.Fluent.DisposableHelper.DisposableWrapper`1">
            <summary>
            包装没有实现 IDisposable 的对象，使其支持 using
            </summary>
            <typeparam name="T">包装的对象类型</typeparam>
        </member>
        <member name="M:Ivony.Fluent.DisposableHelper.DisposableWrapper`1.op_Implicit(Ivony.Fluent.DisposableHelper.DisposableWrapper{`0})~`0">
            <summary>
            重载隐式类型转换运算符，使得包装对象可以被隐式类型转换为被包装对象
            </summary>
            <param name="wrapper">包装对象</param>
            <returns>被包装的对象</returns>
        </member>
        <member name="T:Ivony.Fluent.EnumerableExtension">
            <summary>
            提供 IEnumerable 对象的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.RandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机获取一个元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="source">元素集</param>
            <returns>随机挑选的一个元素</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列每一项执行指定操作
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要执行操作的序列</param>
            <param name="action">要执行的操作</param>
            <returns>源序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.Copy``1(``0[])">
            <summary>
            将数组复制一份
            </summary>
            <typeparam name="T">数组元素类型</typeparam>
            <param name="array">源数组</param>
            <returns>复制的数组</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            对序列每一项执行指定操作
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要执行操作的序列</param>
            <param name="action">要执行的操作</param>
            <returns>源序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.ForSingle``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列唯一项执行指定操作，若序列包含不止一个项，则抛出异常
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要执行操作的序列</param>
            <param name="action">要执行的操作</param>
            <returns>源序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.ForFirst``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列首项执行指定操作
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要执行操作的序列</param>
            <param name="action">要执行的操作</param>
            <returns>源序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.ForLast``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对序列末项执行指定操作
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要执行操作的序列</param>
            <param name="action">要执行的操作</param>
            <returns>源序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.NotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从序列中去除为空（null）的项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.IsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            确定序列是否确实有且只有一个元素
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要检测的序列</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.IsSingle``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            确定序列是否确实有且只有一个元素
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要检测的序列</param>
            <param name="element">如果有，则返回唯一的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检查序列是否为 null 或者为空。
            </summary>
            <typeparam name="T">序列元素类型</typeparam>
            <param name="source">要检测的序列</param>
            <returns>是否为 null 或者空序列</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindTo``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Action{``0,``1})">
            <summary>
            将集合的每一项按顺序绑定到另一个集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindTo``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Action{``0,``1,System.Int32})">
            <summary>
            将集合的每一项按顺序绑定到另一个集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindTo``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1})">
            <summary>
            将集合的每一项按顺序绑定到另一个集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="defaultValue">当源集合元素不够时所采用的默认元素</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindTo``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1,System.Int32})">
            <summary>
            将集合的每一项按顺序绑定到另一个集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="defaultValue">当源集合元素不够时所采用的默认元素</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindFrom``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1})">
            <summary>
            将源集合的每一项按顺序绑定到集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindFrom``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1,System.Int32})">
            <summary>
            将源集合的每一项按顺序绑定到集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindFrom``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},``0,System.Action{``0,``1})">
            <summary>
            将源集合的每一项按顺序绑定到集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="defaultValue">当源集合元素不够时所采用的默认元素</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.BindFrom``2(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},``0,System.Action{``0,``1,System.Int32})">
            <summary>
            将源集合的每一项按顺序绑定到集合
            </summary>
            <typeparam name="TSource">源集合元素类型</typeparam>
            <typeparam name="TTarget">目标集合元素类型</typeparam>
            <param name="source">源集合</param>
            <param name="targets">目标集合</param>
            <param name="defaultValue">当源集合元素不够时所采用的默认元素</param>
            <param name="binder">绑定方法</param>
            <returns>源集合</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            创建只读枚举封装，避免集合类型强制类型转换后被修改
            </summary>
            <typeparam name="T">枚举元素类型</typeparam>
            <param name="enumerable">要创建只读枚举封装的集合</param>
            <returns>只读枚举封装</returns>
        </member>
        <member name="M:Ivony.Fluent.EnumerableExtension.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            创建只读列表封装，避免集合类型强制类型转换后被修改
            </summary>
            <typeparam name="T">列表元素类型</typeparam>
            <param name="list">要创建只读列表封装的集合</param>
            <returns>只读列表封装</returns>
        </member>
        <member name="T:Ivony.Fluent.StringExtensions">
            <summary>
            提供字符串相关的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Fluent.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            对字符串执行不区分大小写的比较
            </summary>
            <param name="str1">要比较的第一个字符串</param>
            <param name="str2">要比较的第二个字符串</param>
            <returns>两个字符串除了大小写是否存在其他区别</returns>
        </member>
        <member name="T:Ivony.KeyedCache`2">
            <summary>
            使用唯一键检索的延迟加载缓存实现
            </summary>
            <typeparam name="TKey">用于检索缓存对象的键的类型</typeparam>
            <typeparam name="TValue">缓存对象的类型</typeparam>
        </member>
        <member name="M:Ivony.KeyedCache`2.#ctor">
            <summary>
            创建 KeyedCache 实例
            </summary>
        </member>
        <member name="M:Ivony.KeyedCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            创建 KeyedCache 实例
            </summary>
            <param name="comparer">比较键时要使用的 System.Collections.Generic.IEqualityComparer&gt;T&lt; 实现</param>
        </member>
        <member name="M:Ivony.KeyedCache`2.FetchOrCreateItem(`0,System.Func{`1})">
            <summary>
            从缓存中获取或创建新项
            </summary>
            <param name="key">缓存键</param>
            <param name="creator">用于创建新项的创建器</param>
            <returns>从缓存中获取或者创建的项</returns>
        </member>
        <member name="T:Ivony.Parser.TokenizerBase">
            <summary>
            协助实现 Tokenizer 的基类
            </summary>
        </member>
        <member name="F:Ivony.Parser.TokenizerBase.CName">
            <summary>
            用于匹配 CName 的正则表达式
            </summary>
        </member>
        <member name="F:Ivony.Parser.TokenizerBase.WhiteSpace">
            <summary>
            用于匹配空白字符的正则表达式
            </summary>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.Initialize(System.String,System.Int32)">
            <summary>
            初始化 Tokenizer
            </summary>
            <param name="text">要分析的字符串</param>
            <param name="index">要开始分析的位置</param>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.Match(System.Char)">
            <summary>
            在扫描器当前位置是否为指定的字符，若匹配到指定字符，则推移扫描器指针
            </summary>
            <param name="ch">指定的字符</param>
            <returns>当前位置是否为指定的字符</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.IsMatch(System.Char)">
            <summary>
            判断扫描器当前位置是否为指定的字符
            </summary>
            <param name="ch">指定的字符</param>
            <returns>当前位置是否为指定的字符</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.EnsureMatch(System.Char)">
            <summary>
            确定扫描器当前位置必须为指定的字符
            </summary>
            <param name="ch">指定的字符</param>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.IsMatchAny(System.Char[])">
            <summary>
            判断扫描器当前位置是否为指定的字符
            </summary>
            <param name="chars">指定的字符</param>
            <returns>当前位置是否为指定的字符</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.EnsureMatchAny(System.Char[])">
            <summary>
            确定扫描器当前位置必须为指定的字符
            </summary>
            <param name="chars">指定的字符</param>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.Match(System.Text.RegularExpressions.Regex)">
            <summary>
            在扫描器当前位置进行正则匹配。
            </summary>
            <param name="regularExpression">正则表达式</param>
            <returns>若匹配成功，返回匹配对象，否则返回null。</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.IsMatch(System.Text.RegularExpressions.Regex)">
            <summary>
            确认在扫描器当前位置是否满足正则匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <returns>当前位置是否满足正则匹配</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.EnsureMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            确保在扫描器当前位置必须满足正则匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="description">关于该匹配的描述</param>
            <returns>当前位置是否满足正则匹配</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.FormatError">
            <summary>
            构建一个字符串格式错误的异常，报告解析器在当前位置遇到格式错误
            </summary>
            <returns>异常信息</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.FormatError(System.Char)">
            <summary>
            构建一个字符串格式错误的异常，报告解析器在当前位置遇到格式错误
            </summary>
            <param name="desired">在当前位置期望的字符</param>
            <returns>异常信息</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.FormatError(System.String)">
            <summary>
            构建一个字符串格式错误的异常，报告解析器在当前位置遇到格式错误
            </summary>
            <param name="description">在当前位置期望遇到的匹配的描述</param>
            <returns>异常信息</returns>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.Scaner">
            <summary>
            字符串扫描器
            </summary>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="T:Ivony.Parser.TokenizerBase.TextScaner">
            <summary>
            定义一个字符枚举器
            </summary>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.#ctor(System.Object,System.String)">
            <summary>
            构建 TextScaner 对象
            </summary>
            <param name="syncRoot">用于同步的对象</param>
            <param name="text">要扫描的字符串</param>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.#ctor(System.Object,System.String,System.Int32)">
            <summary>
            构建 TextScaner 对象
            </summary>
            <param name="syncRoot">用于同步的对象</param>
            <param name="text">要扫描的字符串</param>
            <param name="index">开始扫描的位置，默认为 0 </param>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.Dispose">
            <summary>
            销毁当前对象，释放所有资源
            </summary>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.MoveNext">
            <summary>
            将索引移动到下一个字符，若已经到字符串末尾，则返回 false ， 否则返回 true
            </summary>
            <returns>是否到达字符串末尾</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.Reset">
            <summary>
            重置索引到构建对象时传入的位置
            </summary>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.SubString(System.Int32,System.Int32)">
            <summary>
            从扫描的字符串中截取一段
            </summary>
            <param name="offset">开始位置</param>
            <param name="length">要截取的长度</param>
            <returns>截取的子字符串</returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.ToString">
            <summary>
            获取当前扫描的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Parser.TokenizerBase.TextScaner.Skip(System.Int32)">
            <summary>
            跳过指定数量的字符
            </summary>
            <param name="length">要跳过的字符长度</param>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.TextScaner.Current">
            <summary>
            获取当前索引位置的字符
            </summary>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.TextScaner.Offset">
            <summary>
            当前索引位置
            </summary>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.TextScaner.IsEnd">
            <summary>
            判断当前是指针否已经达到字符串的末尾
            </summary>
        </member>
        <member name="P:Ivony.Parser.TokenizerBase.TextScaner.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="T:Ivony.ReadOnlyEnumerable`1">
            <summary>
            该类为可修改的集合提供一份只读的枚举包装，避免用户利用强制类型转换来修改集合。
            </summary>
            <typeparam name="T">枚举元素类型</typeparam>
        </member>
        <member name="M:Ivony.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            创建只读枚举器的实例
            </summary>
            <param name="enumerable">要包装的枚举器</param>
        </member>
        <member name="M:Ivony.ReadOnlyEnumerable`1.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器
            </summary>
            <returns>可用于循环访问集合的 System.Collections.Generic.IEnumerator&lt;T&gt;</returns>
        </member>
    </members>
</doc>
