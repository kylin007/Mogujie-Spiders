<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Html</name>
    </assembly>
    <members>
        <member name="T:Ivony.Html.CssSelector">
            <summary>
            实现 ICssSelector 接口
            </summary>
        </member>
        <member name="T:Ivony.Html.ICssSelector">
            <summary>
            定义 CSS 选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.ISelector">
            <summary>
            定义 HTML 元素选择器的抽象
            </summary>
        </member>
        <member name="M:Ivony.Html.ISelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            判断一个元素是否符合选择器要求
            </summary>
            <param name="element">要判断的元素</param>
            <returns>是否符合要求</returns>
        </member>
        <member name="P:Ivony.Html.ICssSelector.Specificity">
            <summary>
            CSS 选择器特异性
            </summary>
        </member>
        <member name="M:Ivony.Html.CssSelector.#ctor(Ivony.Html.ISelector,Ivony.Html.CssSpecificity)">
            <summary>
            创建 CssSelector 对象
            </summary>
            <param name="selector">选择器</param>
            <param name="specificity">选择器特异性</param>
        </member>
        <member name="M:Ivony.Html.CssSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            元素是否满足选择器要求
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.CssSelector.Specificity">
            <summary>
            选择器特异性
            </summary>
        </member>
        <member name="P:Ivony.Html.CssSelector.Selector">
            <summary>
            选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.CssSpecificity">
            <summary>
            定义 CSS 选择器的特异性
            </summary>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建 CssSpecificity 对象
            </summary>
            <param name="a">特异性 a 值</param>
            <param name="b">特异性 b 值</param>
            <param name="c">特异性 c 值</param>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.Equals(Ivony.Html.CssSpecificity)">
            <summary>
            检查两个 CSS 特异性是否一致
            </summary>
            <param name="other">要检查的另一个特异性</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.Equals(System.Object)">
            <summary>
            重写 Equals 方法实现特异性的比较
            </summary>
            <param name="obj">要比较的特异性对象</param>
            <returns>两个对象是否相等</returns>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.GetHashCode">
            <summary>
            重写 GetHashCode 方法，获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.CompareTo(System.Object)">
            <summary>
            比较两个 CSS 选择器特异性之间的优先级
            </summary>
            <param name="obj">要进行比较的特异性</param>
            <returns>比较结果</returns>
        </member>
        <member name="M:Ivony.Html.CssSpecificity.CompareTo(Ivony.Html.CssSpecificity)">
            <summary>
            比较两个 CSS 选择器特异性之间的优先级
            </summary>
            <param name="other">要进行比较的特异性</param>
            <returns>比较结果</returns>
        </member>
        <member name="T:Ivony.Html.CssPropertyParser">
            <summary>
            CSS 样式解析器
            </summary>
        </member>
        <member name="M:Ivony.Html.CssPropertyParser.ParseProperties(System.String)">
            <summary>
            解析 CSS 样式属性
            </summary>
            <param name="expression">要解析的 CSS 样式表达式</param>
            <returns>CSS 样式属性</returns>
        </member>
        <member name="M:Ivony.Html.CssPropertyParser.ParseCssStyle(System.String,Ivony.Html.CssStyleSpecificationBase)">
            <summary>
            解析 CSS 样式属性
            </summary>
            <param name="styleExpression">CSS 样式设置表达式</param>
            <param name="specification">所需要采用的 CSS 规范</param>
            <returns>CSS 样式属性</returns>
        </member>
        <member name="T:Ivony.Html.CssStyleSpecificationBase">
            <summary>
            定义 CSS 样式规范抽象基类
            </summary>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.#ctor">
            <summary>
            创建 CssStyleSpecificationBase 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.TransformProperties(Ivony.Html.CssStyleProperty[])">
            <summary>
            转换 CSS 样式属性为其最终形式
            </summary>
            <param name="properties">设置的 CSS 样式属性</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.ValidateProperty(Ivony.Html.CssStyleProperty)">
            <summary>
            检查 CSS 样式属性设置是否合法有效
            </summary>
            <param name="property">要检查的 CSS 样式属性设置</param>
            <returns>是否合法有效</returns>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.ExtractShorthand(Ivony.Html.CssStyleProperty)">
            <summary>
            展开 CSS 样式属性的缩写形式
            </summary>
            <param name="property">样式属性设置</param>
            <returns>展开后的形式，若该设置不是缩写形式，则原样返回</returns>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.IsShorthandStyle(System.String)">
            <summary>
            检查指定的样式属性是否为一个缩写形式
            </summary>
            <param name="name">指定的属性名</param>
            <returns>是否为缩写形式</returns>
        </member>
        <member name="M:Ivony.Html.CssStyleSpecificationBase.TryGetShorthandProperty(System.String,Ivony.Html.CssStyle)">
            <summary>
            获取缩写形式的样式属性
            </summary>
            <param name="name">样式属性名</param>
            <param name="style">所有的样式设置</param>
            <returns>返回缩写形式，如果可能</returns>
        </member>
        <member name="P:Ivony.Html.CssStyleSpecificationBase.StyleShorthandRules">
            <summary>
            获取 CSS 样式缩写规则
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyleSpecificationBase.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="T:Ivony.Html.Css21StyleSpecification">
            <summary>
            CSS 2.1 样式规范
            </summary>
        </member>
        <member name="M:Ivony.Html.Css21StyleSpecification.#ctor">
            <summary>
            创建 Css21StyleSpecification 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Css21StyleSpecification.ValidateProperty(Ivony.Html.CssStyleProperty)">
            <summary>
            检查 CSS 样式属性设置是否合法有效
            </summary>
            <param name="property">要检查的 CSS 样式属性设置</param>
            <returns>是否合法有效</returns>
        </member>
        <member name="T:Ivony.Html.CssStyleShorthandRuleCollection">
            <summary>
            定义 CSS 样式缩写规则容器
            </summary>
        </member>
        <member name="M:Ivony.Html.CssStyleShorthandRuleCollection.GetKeyForItem(Ivony.Html.ICssStyleShorthandRule)">
            <summary>
            重写此方法从样式规则中提取键
            </summary>
            <param name="item">要提取键（即样式名）的样式缩写规则</param>
            <returns>提取的键</returns>
        </member>
        <member name="T:Ivony.Html.CssStyle">
            <summary>
            定义 CSS 样式属性集合
            </summary>
        </member>
        <member name="F:Ivony.Html.CssStyle.importantFlag">
            <summary>
            定义 !important 标识
            </summary>
        </member>
        <member name="M:Ivony.Html.CssStyle.#ctor(Ivony.Html.CssStyleSpecificationBase)">
            <summary>
            创建 CssStyle 对象
            </summary>
            <param name="specification">要遵循的 CSS 规范</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.SetValue(System.String,System.String)">
            <summary>
            设置样式属性
            </summary>
            <param name="name">样式名</param>
            <param name="value">样式值</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.SetValue(System.String,System.String,System.Boolean)">
            <summary>
            设置样式属性
            </summary>
            <param name="name">样式名</param>
            <param name="value">样式值</param>
            <param name="important">指定是否要覆盖其他样式设置</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.SetProperties(Ivony.Html.CssStyleProperty[])">
            <summary>
            设置样式属性
            </summary>
            <param name="properties">要设置的样式属性</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.SetPropertyInternal(Ivony.Html.CssStyleProperty)">
            <summary>
            设置样式属性
            </summary>
            <param name="property">样式属性</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.RemoveProperty(System.String)">
            <summary>
            移除样式属性
            </summary>
            <param name="name">要移除的样式属性名</param>
        </member>
        <member name="M:Ivony.Html.CssStyle.GetValue(System.String)">
            <summary>
            获取样式属性值
            </summary>
            <param name="name">样式名</param>
            <returns>样式设置值</returns>
        </member>
        <member name="M:Ivony.Html.CssStyle.GetProperty(System.String)">
            <summary>
            获取样式属性
            </summary>
            <param name="name">样式名</param>
            <returns>样式设置</returns>
        </member>
        <member name="M:Ivony.Html.CssStyle.ToString">
            <summary>
            获取 CSS 样式的字符串表达形式
            </summary>
            <returns>CSS 样式表达式</returns>
        </member>
        <member name="M:Ivony.Html.CssStyle.Clear">
            <summary>
            清除所有样式
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyle.SyncRoot">
            <summary>
            获取用于线程同步的对象
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyle.Specification">
            <summary>
            获取该 CssStyle 对象所遵循的 CSS 规范。
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyle.Item(System.String)">
            <summary>
            获取或设置样式属性
            </summary>
            <param name="name">样式属性名</param>
            <returns>样式属性值</returns>
        </member>
        <member name="T:Ivony.Html.ICssStyleShorthandRule">
            <summary>
            定义 CSS 样式设置缩写规则
            </summary>
        </member>
        <member name="M:Ivony.Html.ICssStyleShorthandRule.ExtractProperties(System.String)">
            <summary>
            解出属性值
            </summary>
            <param name="shorthand">属性值缩写形式</param>
            <returns>解出的属性值</returns>
        </member>
        <member name="M:Ivony.Html.ICssStyleShorthandRule.TryGetShorthandProperty(Ivony.Html.CssStyle)">
            <summary>
            尝试获取缩写的样式
            </summary>
            <param name="cssStyle">要检查的样式设置，从中找出可以写成缩写形式的样式</param>
            <returns>缩写后的样式</returns>
        </member>
        <member name="P:Ivony.Html.ICssStyleShorthandRule.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="T:Ivony.Html.ExpandedAPI.ExpandedNavigateExtensions">
            <summary>
            提供扩展的导航 API
            </summary>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedNavigateExtensions.FindSingleOrDefault(Ivony.Html.IHtmlContainer,System.String,Ivony.Html.IHtmlElement)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的唯一元素，如果有多个元素符合要求，则会引发异常，如果没有符合要求的元素，则返回 defaultElement 或者 null 。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <param name="defaultElement">（可选）找不到符合要求的元素时应返回的元素，若不提供则返回 null</param>
            <returns>搜索到的符合要求的唯一元素</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedNavigateExtensions.FindFirstOrDefault(Ivony.Html.IHtmlContainer,System.String,Ivony.Html.IHtmlElement)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的第一个元素，若不存在任何符合要求的元素，则返回 defaultElement 或者 null 。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <param name="defaultElement">（可选）找不到符合要求的元素时应返回的元素，若不提供则返回 null</param>
            <returns>搜索到的符合要求的第一个元素</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedNavigateExtensions.FindLastOrDefault(Ivony.Html.IHtmlContainer,System.String,Ivony.Html.IHtmlElement)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的最后一个元素，若不存在任何符合要求的元素，则返回 defaultElement 或者 null 。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <param name="defaultElement">（可选）找不到符合要求的元素时应返回的元素，若不提供则返回 null</param>
            <returns>搜索到的符合要求的最后一个元素</returns>
        </member>
        <member name="T:Ivony.Html.StyleExtensions">
            <summary>
            提供操纵元素 CSS 样式的一些扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.StyleExtensions.Style(Ivony.Html.IHtmlElement)">
            <summary>
            获取元素的样式对象，用于方便的操纵元素样式
            </summary>
            <param name="element">要操纵样式的元素</param>
            <returns>样式对象</returns>
        </member>
        <member name="M:Ivony.Html.StyleExtensions.Style``1(``0,System.String,System.String)">
            <summary>
            对元素设置指定样式
            </summary>
            <typeparam name="T">元素实例类型</typeparam>
            <param name="element">要设置样式的元素</param>
            <param name="name">样式名</param>
            <param name="value">样式值</param>
            <returns>设置了样式的元素</returns>
        </member>
        <member name="M:Ivony.Html.StyleExtensions.Style``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            对元素设置指定样式
            </summary>
            <typeparam name="T">元素实例类型</typeparam>
            <param name="element">要设置样式的元素</param>
            <param name="properties">要设置的样式集</param>
            <returns>设置了样式的元素</returns>
        </member>
        <member name="M:Ivony.Html.StyleExtensions.Class(Ivony.Html.IHtmlElement)">
            <summary>
            获取元素的样式类管理器
            </summary>
            <param name="element">要获取样式类管理器的元素</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.StyleExtensions.Class``1(``0,System.String[])">
            <summary>
            设置元素的样式类
            </summary>
            <param name="element">要设置样式类的元素</param>
            <param name="classes">要设置的样式类</param>
            <returns>被操作的元素</returns>
        </member>
        <member name="T:Ivony.Html.Html41Specification">
            <summary>
            定义 HTML 4.01 规范
            </summary>
            <remarks>此类型实例是只读且线程安全的</remarks>
        </member>
        <member name="T:Ivony.Html.HtmlSpecificationBase">
            <summary>
            定义 HTML 规范抽象基类
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsCDataElement(System.String)">
            <summary>
            确认一个元素是否为 CData 元素
            </summary>
            <remarks>
            对于 CData 元素，解析器不会将开始标签到结束标签之间的任何符号视为 HTML 符号的一部分。
            PCData 元素同时也是 CData 元素
            </remarks>
            <param name="elementName">元素名</param>
            <returns>是否为 CData 元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsOptionalEndTag(System.String)">
            <summary>
            确认一个元素是否拥有可选的结束标签
            </summary>
            <param name="elementName">元素名</param>
            <returns>是否拥有可选的结束标签</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsForbiddenEndTag(System.String)">
            <summary>
            确认一个元素是否不能拥有结束标签和子元素
            </summary>
            <param name="elementName">元素名</param>
            <returns>是否不能拥有结束标签和子元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.ImmediatelyClose(System.String,System.String)">
            <summary>
            检查可选结束标签在当前位置是否需要立即关闭
            </summary>
            <param name="openTag">当前开放的可选结束标签</param>
            <param name="nextTag">HTML 分析器遇到的下一个标签</param>
            <returns>是否需要立即关闭</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsBlockElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为块级元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为块级元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsInlineElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为行内元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为行内元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsSpecialElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为特殊元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为特殊元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsFormInputElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为表单输入元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为表单输入元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsStylingElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为样式设置元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为样式设置元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsListElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为列表定义元素
            </summary>
            <param name="element">需要判断的元素</param>
            <returns>是否为样式设置元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsPhraseElement(Ivony.Html.IHtmlElement)">
            <summary>
            判断元素是否为段落内容定义元素
            </summary>
            <param name="element">要检查的元素</param>
            <returns>是否为段落内容定义元素</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsUriValue(Ivony.Html.IHtmlAttribute)">
            <summary>
            判断一个属性值的值是否应被视为URI。
            </summary>
            <param name="attribute">要检查的属性</param>
            <returns>其值是否应被视为URI</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsScriptValue(Ivony.Html.IHtmlAttribute)">
            <summary>
            判断一个属性值的值是否应被视为脚本。
            </summary>
            <param name="attribute">要检查的属性</param>
            <returns>其值是否应被视为脚本</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.IsMarkupAttribute(Ivony.Html.IHtmlAttribute)">
            <summary>
            判断一个属性是否为标记属性。
            </summary>
            <param name="attribute">要检查的属性</param>
            <returns>是否为标记属性</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.ElementTextMode(Ivony.Html.IHtmlElement)">
            <summary>
            确认元素文本内容格式
            </summary>
            <param name="element">要确认文本内容格式的元素</param>
            <returns>文本内容格式</returns>
        </member>
        <member name="M:Ivony.Html.HtmlSpecificationBase.GetCssStyleSpecification">
            <summary>
            获取与之相匹配的 CSS 样式规范
            </summary>
            <returns></returns>
        </member>
        <member name="F:Ivony.Html.Html41Specification.cdataElements">
            <summary>所有 CDATA 元素，其内部文本不被当作 HTML 文本解释</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.pcdataElements">
            <summary>所有 PCDATA 元素，其内部文本不被当作 HTML 文本解释，但会进行HTML Entity解析</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.fobiddenEndTagElements">
            <summary>所有自结束元素，没有内容和结束标签</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.optionalEndTagElements">
            <summary>所有可选结束元素，其在何处结束由 ImmediatelyClose 方法确定</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.stylingElements">
            <summary>所有设置字体和样式的元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.phraseElements">
            <summary>所有界定文本段落的元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.specialElements">
            <summary>所有用于特殊目的的 HTML 元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.inputControlElements">
            <summary>所有表单控件元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.inlineElements">
            <summary>所有行内呈现的元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.headingElements">
            <summary>所有定义章节标题元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.listElements">
            <summary>所有定义列表的元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.preformatedElements">
            <summary>预格式化元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.blockElements">
            <summary>所有块级元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.flowElements">
            <summary>所有文本流元素</summary>
        </member>
        <member name="F:Ivony.Html.Html41Specification.nonTextElements">
            <summary>所有非显示文本元素</summary>
        </member>
        <member name="T:Ivony.Html.HtmlDomDependency">
            <summary>
            HTML DOM 结构依赖项
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlDomDependency.TryCreateDependency(Ivony.Html.IHtmlContainer,Ivony.Html.HtmlDomDependency@)">
            <summary>
            创建一个 DOM 依赖项，当 DOM 结构发生更改时将会被标记为已过时。
            </summary>
            <param name="scope">要监视 DOM 修改的范围</param>
            <param name="dependency">创建的依赖项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ivony.Html.HtmlDomDependency.TryCreateDependency(Ivony.Html.IHtmlContainer,System.Boolean,Ivony.Html.HtmlDomDependency@)">
            <summary>
            创建一个 DOM 依赖项，当 DOM 结构发生更改时将会被标记为已过时。
            </summary>
            <param name="scope">要监视 DOM 修改的范围</param>
            <param name="inclusive">是否监视自身的修改</param>
            <param name="dependency">创建的依赖项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Ivony.Html.HtmlDomDependency.Reset">
            <summary>
            重置修改状态
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlDomDependency.Dispose">
            <summary>
            销毁依赖项
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlDomDependency.HasChanged">
            <summary>
            自创建或上次重置以来 DOM 结构是否已被更改
            </summary>
        </member>
        <member name="T:Ivony.Html.AttributeExtensions">
            <summary>
            提供协助操作 Attribute 的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.Attribute(Ivony.Html.IHtmlElement,System.String)">
            <summary>
            获取指定名称的属性对象
            </summary>
            <param name="element">元素</param>
            <param name="name">属性名</param>
            <returns>属性对象，如果没找到，则返回null</returns>
            <remarks>
            如果有多个同名的属性，此方法将报错。
            </remarks>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.Value(Ivony.Html.IHtmlAttribute)">
            <summary>
            获取属性值，与 AttributeValue 属性不同，Value 方法在属性对象为 null 时不会抛出异常
            </summary>
            <param name="attribute">属性对象</param>
            <returns>属性值，如果属性对象为null，则返回null</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetValue(Ivony.Html.IHtmlAttribute,System.String)">
            <summary>
            设置属性的值，这会产生一个新的属性，并返回
            </summary>
            <param name="attribute">要设置值的属性</param>
            <param name="value">设置的值</param>
            <returns>所创建的新属性</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String)">
            <summary>
            设置属性为空值
            </summary>
            <param name="element">要设置属性值的元素</param>
            <param name="attributeName">属性名</param>
            <returns>设置了属性的元素</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性值的元素</param>
            <param name="attributeName">属性名</param>
            <param name="value">属性值</param>
            <returns>设置了属性的元素</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.String,Ivony.Html.IHtmlAttribute@)">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性值的元素</param>
            <param name="attributeName">属性名</param>
            <param name="value">属性值</param>
            <param name="attribute">设置好的属性</param>
            <returns>设置了属性的元素</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.String,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性值的元素</param>
            <param name="attributeName">属性名</param>
            <param name="oldValue">要被替换的字符串</param>
            <param name="newValue">用于替换的字符串</param>
            <returns>设置了属性的元素</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性的元素</param>
            <param name="attributeName">属性名</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="replacement">替换字符串</param>
            <returns>返回元素便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性的元素</param>
            <param name="attributeName">属性名</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="evaluator">替换字符串</param>
            <returns>返回元素便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(Ivony.Html.IHtmlElement,System.String,System.Func{System.String,System.String})">
            <summary>
            设置属性值
            </summary>
            <param name="element">要设置属性的元素</param>
            <param name="attributeName">属性名</param>
            <param name="evaluator">用于替换属性值的计算函数</param>
            <returns>返回元素便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="value">属性值</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.String,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="oldValue">要被替换的字符串</param>
            <param name="newValue">用于替换的字符串</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="replacement">替换字符串</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="pattern">用于在属性值中查找匹配字符串的正则表达式对象</param>
            <param name="evaluator">替换字符串</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.Func{System.String,System.String})">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="evaluator">用于替换属性值的计算函数</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.SetAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String,System.Func{System.Int32,System.String,System.String})">
            <summary>
            设置属性值
            </summary>
            <param name="elements">要设置属性值的元素列表</param>
            <param name="attributeName">属性名</param>
            <param name="evaluator">用于替换属性值的计算函数</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.RemoveAttribute``1(``0,System.String)">
            <summary>
            移除指定的属性
            </summary>
            <param name="element">要移除属性的元素</param>
            <param name="attributeName">要移除的属性名称</param>
            <returns>返回元素以便于链式调用</returns>
        </member>
        <member name="M:Ivony.Html.AttributeExtensions.RemoveAttribute(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String)">
            <summary>
            移除指定的属性
            </summary>
            <param name="elements">要移除属性的元素列表</param>
            <param name="attributeName">要移除的属性名称</param>
            <returns>返回元素列表便于链式调用</returns>
        </member>
        <member name="T:Ivony.Html.ContentExtensions">
            <summary>
            提供内容分析呈现的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.InnerHtml(Ivony.Html.IHtmlContainer)">
            <summary>
            尝试获取元素子节点的HTML表现形式，如果DOM不支持RawHtml，则此方法尝试生成HTML
            </summary>
            <param name="container">要生成InnerHTML的容器</param>
            <returns>容器所有子节点的HTML表现形式</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.InnerHtml(Ivony.Html.IHtmlContainer,System.Boolean)">
            <summary>
            尝试获取元素子节点的HTML表现形式
            </summary>
            <param name="container">要生成InnerHTML的容器</param>
            <param name="normalization">指定是否强制生成规范化的HTML，如果此参数为true，将忽略DOM节点的RawHtml属性</param>
            <returns>容器所有子节点的HTML表现形式</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.OuterHtml(Ivony.Html.IHtmlNode)">
            <summary>
            尝试获取整个节点的HTML表现形式，如果DOM不支持RawHtml，则此方法尝试生成HTML
            </summary>
            <param name="node">要获取HTML表现形式的节点</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.OuterHtml(Ivony.Html.IHtmlNode,System.Boolean)">
            <summary>
            尝试获取整个节点的HTML表现形式
            </summary>
            <param name="node">要获取HTML表现形式的节点</param>
            <param name="normalization">指定是否强制生成规范化的HTML，如果此参数为true，将忽略DOM节点的RawHtml属性</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.GenerateHtml(Ivony.Html.IHtmlNode)">
            <summary>
            尝试生成节点的HTML表现形式
            </summary>
            <param name="node">要生成HTML的节点</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.GenerateElementHtml(Ivony.Html.IHtmlElement)">
            <summary>
            尝试生成元素的HTML表现形式
            </summary>
            <param name="element">要生成HTML的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.GenerateTagHtml(Ivony.Html.IHtmlElement,System.Boolean)">
            <summary>
            尝试生成元素开始标签的HTML形式
            </summary>
            <param name="element">要生成HTML的元素</param>
            <param name="selfClosed">指示是否应产生自结束符号</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.InnerText(Ivony.Html.IHtmlNode)">
            <summary>
            尝试获取节点的文本表现形式，对于某些不支持文本表现形式的元素，将直接返回null
            </summary>
            <param name="node">要获取文本表现形式的节点</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.IsWhiteSpace(Ivony.Html.IHtmlTextNode)">
            <summary>
            判断一个文本节点是不是全部由空白字符组成
            </summary>
            <param name="textNode">要判断的文本节点</param>
            <returns>是否全部是空白字符</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlDocument)">
            <summary>
            将文档呈现为 HTML
            </summary>
            <param name="document">要呈现的文档</param>
            <returns>文档的 HTML 形式</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlDocument,Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            将文档呈现为 HTML
            </summary>
            <param name="document">要呈现的文档</param>
            <param name="adapters">HTML 输出转换器</param>
            <returns>文档的 HTML 形式</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlDocument,System.IO.TextWriter,Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            将文档呈现为 HTML
            </summary>
            <param name="document">要呈现的文档</param>
            <param name="writer">HTML 编写器</param>
            <param name="adapters">HTML 输出转换器</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlDocument,System.IO.Stream,System.Text.Encoding)">
            <summary>
            将文档呈现为 HTML
            </summary>
            <param name="document">要呈现的文档</param>
            <param name="stream">用于输出呈现的 HTML 的流</param>
            <param name="encoding">呈现的 HTML 的编码格式</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.RenderChilds(Ivony.Html.IHtmlContainer,System.IO.TextWriter,Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            渲染所有的子节点
            </summary>
            <param name="container">要渲染子节点的容器</param>
            <param name="writer">用于输出的文本编写器</param>
            <param name="adapters">渲染代理</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.RenderChilds(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlRenderContext)">
            <summary>
            渲染所有的子节点
            </summary>
            <param name="container">要渲染子节点的容器</param>
            <param name="context">渲染上下文</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlNode)">
            <summary>
            将节点呈现为 HTML
            </summary>
            <param name="node">要呈现的节点</param>
            <returns>呈现的 HTML</returns>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlNode,System.IO.TextWriter)">
            <summary>
            将节点呈现为 HTML
            </summary>
            <param name="node">要呈现的节点</param>
            <param name="writer">HTML 编写器</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlNode,System.IO.TextWriter,Ivony.Html.IHtmlRenderAdapter[])">
            <summary>
            将节点呈现为 HTML
            </summary>
            <param name="node">要呈现的节点</param>
            <param name="writer">HTML 编写器</param>
            <param name="adapters">HTML 输出转换器</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.Render(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlRenderContext)">
            <summary>
            将节点呈现为 HTML
            </summary>
            <param name="node">要呈现的节点</param>
            <param name="context">渲染上下文</param>
        </member>
        <member name="M:Ivony.Html.ContentExtensions.RenderElementAndChilds(Ivony.Html.IHtmlElement,Ivony.Html.IHtmlRenderContext)">
            <summary>
            渲染元素和其子节点
            </summary>
            <param name="element">要渲染的元素</param>
            <param name="context">渲染上下文</param>
        </member>
        <member name="T:Ivony.Html.TextFormatOption">
            <summary>
            文本格式化选项
            </summary>
        </member>
        <member name="F:Ivony.Html.TextFormatOption.None">
            <summary>不进行任何格式化</summary>
        </member>
        <member name="F:Ivony.Html.TextFormatOption.BreakLine">
            <summary>将换行转换为 &lt;br /&gt;</summary>
        </member>
        <member name="F:Ivony.Html.TextFormatOption.BreakLineAndKeepWhiteSpace">
            <summary>将换行转换为 &lt;br /&gt;并且保持空白字符不被合并。</summary>
        </member>
        <member name="T:Ivony.Html.DocumentExtensions">
            <summary>
            提供应用于 Document 特有的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.GetElementById(Ivony.Html.IHtmlDocument,System.String)">
            <summary>
            在文档中通过ID来查找元素
            </summary>
            <param name="document">要查找元素的文档</param>
            <param name="id">元素ID</param>
            <returns>找到的元素，没有符合要求的则返回null</returns>
            <exception cref="T:System.InvalidOperationException">找到多个ID相同的元素</exception>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.Identity(Ivony.Html.IHtmlElement)">
            <summary>
            返回元素的唯一ID，如果没有ID属性，或者有但非唯一，返回null
            </summary>
            <param name="element">要标识的元素</param>
            <returns>元素的唯一ID。</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.Identity(Ivony.Html.IHtmlElement,System.Boolean)">
            <summary>
            返回元素的唯一ID，如果没有ID属性，或者有但非唯一，返回null
            </summary>
            <param name="element">要标识的元素</param>
            <param name="create">指示当没有唯一ID时是否创建一个</param>
            <returns>元素的唯一ID。</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.Identity(Ivony.Html.IHtmlElement,System.Boolean,System.Boolean)">
            <summary>
            返回元素的唯一ID，没有ID属性，或者有但非唯一，返回null
            </summary>
            <param name="element">要标识的元素</param>
            <param name="create">指示当没有唯一ID时是否创建一个</param>
            <param name="ancestorsCreate">在创建ID的过程中，是否为没有唯一ID的父级也创建ID</param>
            <returns>元素的唯一ID。</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.Unique(Ivony.Html.IHtmlElement)">
            <summary>
            获取元素的唯一标识
            </summary>
            <param name="element">要获取标识的元素</param>
            <returns>唯一标识</returns>
            <remarks>
            元素的唯一标识仅在文档结构不被修改时唯一，当文档结构变化时，元素的唯一标识将会改变，也不能确保唯一性
            </remarks>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.EnsureAllocated(Ivony.Html.IHtmlNode)">
            <summary>
            确保节点是已分配在一个固定的文档上（未从 DOM 移除，也不是以碎片形式存在）
            </summary>
            <param name="node">要检查的节点</param>
            <exception cref="T:System.InvalidOperationException">如果节点没有被分配在一个固定的文档。</exception>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.IsAllocated(Ivony.Html.IHtmlNode)">
            <summary>
            确定节点被分配在一个固定的文档上（未从 DOM 移除，也不是以碎片形式存在）
            </summary>
            <param name="node">要确定的节点</param>
            <returns>是否被分配在一个固定的文档上</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.AllNodes(Ivony.Html.IHtmlDocument)">
            <summary>
            返回文档所有节点，包括已分配和游离的
            </summary>
            <param name="document">查找节点的文档</param>
            <returns>文档的所有节点</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.AllElements(Ivony.Html.IHtmlDocument)">
            <summary>
            返回文档所有元素，包括已分配和游离的
            </summary>
            <param name="document">查找元素的文档</param>
            <returns>文档的所有元素</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.ResolveUriToAbsoluate(Ivony.Html.IHtmlDocument)">
            <summary>
            将文档中所有的uri属性转换为绝对的uri。
            </summary>
            <param name="document">要执行转换的文档</param>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.ResolveUriToAbsoluate(Ivony.Html.IHtmlDocument,System.Boolean)">
            <summary>
            将文档中所有的uri属性转换为绝对的uri。
            </summary>
            <param name="document">要执行转换的文档</param>
            <param name="resolveInternalReference">是否转换页内 uri</param>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.ElementTextMode(Ivony.Html.IHtmlNode)">
            <summary>
            获取当前节点的文本模式
            </summary>
            <param name="node">要获取文本模式的节点</param>
            <returns>节点当前适用的文本模式</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.GenerateCodeMethod(Ivony.Html.IHtmlDocument,System.String)">
            <summary>
            根据文档结构产生一个方法，文档结构可以由此方法的执行结果复原
            </summary>
            <param name="document">要编译的文档</param>
            <param name="methodName">产生的方法名称</param>
            <returns>可以复原文档的方法代码</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.Compile(Ivony.Html.IHtmlDocument)">
            <summary>
            将文档结构编译成一个方法，文档结构可以由此方法复原
            </summary>
            <param name="document">要编译的文档</param>
            <returns>复原文档的方法</returns>
        </member>
        <member name="T:Ivony.Html.DocumentExtensions.DocumentCompiler">
            <summary>
            文档编译器，负责将 HTML DOM 结构编译成代码
            </summary>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.DocumentCompiler.Compile(Ivony.Html.IHtmlDocument)">
            <summary>
            将一个文档编译成一个方法
            </summary>
            <param name="document">要编译的文档</param>
            <returns>编译好的方法，文档可以透过此方法复原</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.DocumentCompiler.CompileDynamicMethod(Ivony.Html.IHtmlDocument)">
            <summary>
            将文档编译成一个动态方法，为下一步转换成委托做准备。
            </summary>
            <param name="document">要编译的文档</param>
            <returns>编译好的动态方法</returns>
        </member>
        <member name="M:Ivony.Html.DocumentExtensions.DocumentCompiler.CompileDynamicMethod(Ivony.Html.IHtmlFragment)">
            <summary>
            将文档碎片编译成一个动态方法，为下一步转换成委托做准备。
            </summary>
            <param name="fragment">要编译的文档碎片</param>
            <returns>编译好的动态方法</returns>
        </member>
        <member name="T:Ivony.Html.DocumentExtensions.DocumentCompiler.DynamicMethodHandler">
            <summary>
            用于携带 DynamicMethod 实例的类型
            </summary>
        </member>
        <member name="T:Ivony.Html.DomExtensions">
            <summary>
            提供修改文档对象模型（DOM）的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.DomExtensions.CreateFragment(Ivony.Html.IHtmlDocument)">
            <summary>
            创建文档碎片
            </summary>
            <param name="document">要创建文档碎片的文档</param>
            <returns>创建的文档碎片</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.ParseFragment(Ivony.Html.IHtmlDocument,System.String)">
            <summary>
            解析 HTML 并创建文档碎片
            </summary>
            <param name="document">要创建文档碎片的文档</param>
            <param name="html">要解析的 HTML</param>
            <returns>创建的文档碎片</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddElement(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在末尾添加一个元素
            </summary>
            <param name="container">要添加元素的容器</param>
            <param name="elementName">元素名</param>
            <returns>创建并添加好的元素</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddElement(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            添加一个元素到指定位置
            </summary>
            <param name="container">要添加元素的容器</param>
            <param name="index">添加的位置</param>
            <param name="elementName">元素名</param>
            <returns>创建并添加好的元素</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddTextNode(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在末尾添加一个文本节点
            </summary>
            <param name="container">要添加文本节点的容器</param>
            <param name="htmlText">HTML 文本</param>
            <returns>创建并添加好的文本节点</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddTextNode(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            添加一个文本节点到指定位置
            </summary>
            <param name="container">要添加文本节点的容器</param>
            <param name="index">添加的位置</param>
            <param name="htmlText">HTML 文本</param>
            <returns>创建并添加好的文本节点</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddComment(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在末尾添加一个注释节点
            </summary>
            <param name="container">要添加注释节点的容器</param>
            <param name="comment">HTML 注释文本</param>
            <returns>创建并添加好的注释节点</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddComment(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            添加一个注释节点到指定位置
            </summary>
            <param name="container">要添加注释节点的容器</param>
            <param name="index">添加的位置</param>
            <param name="comment">HTML 注释文本</param>
            <returns>创建并添加好的注释节点</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddFragment(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlFragment)">
            <summary>
            在末尾添加一个文档碎片
            </summary>
            <param name="container">要添加碎片的容器</param>
            <param name="fragment">要添加的碎片</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddFragment(Ivony.Html.IHtmlContainer,System.Int32,Ivony.Html.IHtmlFragment)">
            <summary>
            添加一个文档碎片到指定位置
            </summary>
            <param name="container">要添加碎片的容器</param>
            <param name="index">要添加的位置</param>
            <param name="fragment">要添加的碎片</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddFragment(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在末尾添加一段 HTML 片段
            </summary>
            <param name="container">要添加碎片的容器</param>
            <param name="html">要分析成碎片的 HTML 文本</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddFragment(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            添加一段 HTML 片段到指定位置
            </summary>
            <param name="container">要添加碎片的容器</param>
            <param name="index">要添加的位置</param>
            <param name="html">要分析成碎片的 HTML 文本</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlTextNode)">
            <summary>
            在末尾添加节点的副本
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="textNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Int32,Ivony.Html.IHtmlTextNode)">
            <summary>
            添加节点的副本到指定位置
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="index">添加的位置</param>
            <param name="textNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlComment)">
            <summary>
            在末尾添加注释节点的副本
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="comment">要创作副本的注释节点</param>
            <returns>添加后的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Int32,Ivony.Html.IHtmlComment)">
            <summary>
            添加注释节点的副本到指定位置
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="index">要添加的位置</param>
            <param name="comment">要创作副本的注释节点</param>
            <returns>添加后的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlElement)">
            <summary>
            在末尾添加元素的副本
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="element">要创作副本的元素</param>
            <returns>添加后的元素</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Int32,Ivony.Html.IHtmlElement)">
            <summary>
            添加元素的副本到指定位置
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="index">要添加的位置</param>
            <param name="element">要创作副本的元素</param>
            <returns>添加后的元素</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlNode)">
            <summary>
            在末尾添加节点的副本
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="node">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Int32,Ivony.Html.IHtmlNode)">
            <summary>
            添加节点的副本到指定位置
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="index">要添加的位置</param>
            <param name="node">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            在末尾添加节点集合的副本
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="node">要创作副本的节点集合</param>
            <returns>添加后的节点集合</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddCopy(Ivony.Html.IHtmlContainer,System.Int32,System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            添加节点集合的副本到指定位置
            </summary>
            <param name="container">要添加副本的容器</param>
            <param name="index">要添加的位置</param>
            <param name="nodes">要创作副本的节点集合</param>
            <returns>添加后的节点集合</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.MakeCopy(Ivony.Html.IHtmlFragment)">
            <summary>
            创建文档片段的副本
            </summary>
            <param name="fragment">要创建副本的文档片段</param>
            <returns>文档片段的副本</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.MakeCopy(Ivony.Html.IHtmlDomProvider,Ivony.Html.IHtmlDocument)">
            <summary>
            创建文档的副本
            </summary>
            <param name="provider">用于创建副本文档的 IHtmlDomProvider 对象</param>
            <param name="document">要创建副本的文档</param>
            <returns>文档的副本</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.AddAttribute(Ivony.Html.IHtmlElement,System.String,System.String)">
            <summary>
            添加一个属性
            </summary>
            <param name="element">要添加属性的元素</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
            <returns>添加的属性</returns>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.Remove(Ivony.Html.IHtmlNode)">
            <summary>
            尝试从 DOM 中移除此节点
            </summary>
            <param name="node">要被移除的节点</param>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
            <remarks>
            若节点不存在（即为 null），则此方法不执行任何操作
            </remarks>
        </member>
        <member name="M:Ivony.Html.DomExtensions.Remove(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            尝试从 DOM 中移除这些节点
            </summary>
            <param name="nodes">要移除的节点</param>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
            <exception cref="T:System.InvalidOperationException">若节点不是位于同一文档</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.Remove(Ivony.Html.IHtmlAttribute)">
            <summary>
            尝试从 DOM 中移除此属性
            </summary>
            <param name="attribute">要被移除的属性</param>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
            <remarks>
            若属性不存在（即为 null），则此方法不执行任何操作
            </remarks>
        </member>
        <member name="M:Ivony.Html.DomExtensions.Remove(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlAttribute})">
            <summary>
            尝试从 DOM 中移除这些属性
            </summary>
            <param name="attributes">要移除的属性</param>
            <exception cref="T:System.NotSupportedException">若文档不支持修改 DOM 结构</exception>
            <exception cref="T:System.InvalidOperationException">若属性不是位于同一文档</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.ReplaceWith(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlFragment)">
            <summary>
            尝试使用指定的 HTML 碎片替换此节点
            </summary>
            <param name="node">要被替换的节点</param>
            <param name="fragment">替换节点的 HTML 碎片</param>
            <returns>碎片置入后产生的节点集</returns>
            <exception cref="T:System.InvalidOperationException">若节点和碎片不在同一文档</exception>
        </member>
        <member name="M:Ivony.Html.DomExtensions.ReplaceWith(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            尝试使用指定的 HTML 文本片段替换此节点
            </summary>
            <param name="node">要被替换的节点</param>
            <param name="html">替换节点的 HTML 文本</param>
            <returns>HTML 文本置入后产生的节点集</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.InnerText``1(``0,System.String)">
            <summary>
            使用指定文本替换元素内容（警告，此方法会清除元素所有内容）
            </summary>
            <param name="element">要替换内容的元素</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:Ivony.Html.DomExtensions.InnerText``1(``0,System.String,System.Boolean)">
            <summary>
            使用指定文本替换元素内容（警告，此方法会清除元素所有内容）
            </summary>
            <param name="element">要替换内容的元素</param>
            <param name="text">文本内容</param>
            <param name="encodeWhiteSpaces">是否编码空白字符</param>
        </member>
        <member name="M:Ivony.Html.DomExtensions.ParseText(System.String,Ivony.Html.IHtmlFragmentManager)">
            <summary>
            将文本解析为产生同样文本流效果的 HTML 片段
            </summary>
            <param name="text">要解析的文本</param>
            <param name="manager">HTML 片段管理器</param>
            <returns>HTML 片段</returns>
        </member>
        <member name="M:Ivony.Html.DomExtensions.InnerHtml``1(``0,System.String)">
            <summary>
            使用指定的HTML文本替换元素内容（警告，此方法会清除元素所有内容）
            </summary>
            <param name="element">要替换内容的元素</param>
            <param name="html">要替换的HTML代码</param>
        </member>
        <member name="M:Ivony.Html.DomExtensions.ClearNodes``1(``0)">
            <summary>
            清除所有子节点
            </summary>
            <param name="container">要清除所有子节点的容器</param>
        </member>
        <member name="T:Ivony.Html.DomModifierExtensions">
            <summary>
            针对 DomModifier 对象的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.DomModifierExtensions.AddElement(Ivony.Html.IHtmlDomModifier,Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在容器末尾增加一个元素
            </summary>
            <param name="modifier">DOM 结构修改器</param>
            <param name="container">要添加元素的容器</param>
            <param name="elementName">元素名</param>
            <returns>添加的元素</returns>
        </member>
        <member name="M:Ivony.Html.DomModifierExtensions.AddTextNode(Ivony.Html.IHtmlDomModifier,Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在容器末尾增加一个文本节点
            </summary>
            <param name="modifier">DOM 结构修改器</param>
            <param name="container">要添加节点的容器</param>
            <param name="htmlText">HTML文本</param>
            <returns>添加的文本节点</returns>
        </member>
        <member name="M:Ivony.Html.DomModifierExtensions.AddComment(Ivony.Html.IHtmlDomModifier,Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            在容器末尾增加一个注释节点
            </summary>
            <param name="modifier">DOM 结构修改器</param>
            <param name="container">要添加注释的容器</param>
            <param name="comment">HTML注释</param>
            <returns>添加的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.DomModifierExtensions.MakeCopy(Ivony.Html.IHtmlFragmentManager,Ivony.Html.IHtmlNode)">
            <summary>
            创建指定节点的副本
            </summary>
            <param name="manager">HTML 碎片管理器，用来创建碎片</param>
            <param name="node">要创建副本的节点</param>
            <returns>节点的游离副本（ HTML 碎片形式）</returns>
        </member>
        <member name="T:Ivony.Html.ExpandedAPI.ExpandedDomExtensions">
            <summary>
            扩展的 DOM API
            </summary>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddFragmentAfterSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlFragment)">
            <summary>
            在自己后面添加一个文档碎片
            </summary>
            <param name="node">要在其后添加碎片的节点</param>
            <param name="fragment">要添加 HTML 碎片</param>
            <returns>添加后的节点集</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddFragmentBeforeSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlFragment)">
            <summary>
            在自己前面添加一个文档碎片
            </summary>
            <param name="node">要在其前面添加碎片的节点</param>
            <param name="fragment">要添加 HTML 碎片</param>
            <returns>添加后的节点集</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddFragmentAfterSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己后面添加一个文档碎片
            </summary>
            <param name="node">要在其后添加碎片的节点</param>
            <param name="html">要分析成碎片的 HTML 文本</param>
            <returns>添加后的节点集</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddFragmentBeforeSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己前面添加一个文档碎片
            </summary>
            <param name="node">要在其前面添加碎片的节点</param>
            <param name="html">要分析成碎片的 HTML 文本</param>
            <returns>添加后的节点集</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCommentAfterSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己后面添加一个注释
            </summary>
            <param name="node">要在其后添加注释的节点</param>
            <param name="comment">要添加 HTML 注释内容</param>
            <returns>添加的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCommentBeforeSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己前面添加一个注释
            </summary>
            <param name="node">要在其前面添加注释的节点</param>
            <param name="comment">要添加 HTML 注释内容</param>
            <returns>添加的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddTextNodeAfterSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己后面添加一个文本节点
            </summary>
            <param name="node">要在其后添加文本的节点</param>
            <param name="htmlText">要添加 HTML 文本</param>
            <returns>添加的文本节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddTextNodeBeforSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己前面添加一个文本节点
            </summary>
            <param name="node">要在其前面添加文本的节点</param>
            <param name="htmlText">要添加 HTML 文本</param>
            <returns>添加的文本节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddElementAfterSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己后面添加一个元素
            </summary>
            <param name="node">要在其后添加元素的节点</param>
            <param name="elementName">添加的元素名</param>
            <returns>添加的元素</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddElementBeforeSelf(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            在自己前面添加一个元素
            </summary>
            <param name="node">要在其前面添加元素的节点</param>
            <param name="elementName">添加的元素名</param>
            <returns>添加的元素</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyAfterSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlTextNode)">
            <summary>
            在后面添加节点的副本
            </summary>
            <param name="node">要在其后面添加副本的节点</param>
            <param name="textNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyBeforeSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlTextNode)">
            <summary>
            在前面添加节点的副本
            </summary>
            <param name="node">要在其前面添加副本的节点</param>
            <param name="textNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyAfterSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlComment)">
            <summary>
            在后面添加节点的副本
            </summary>
            <param name="node">要在其后面添加副本的节点</param>
            <param name="comment">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyBeforeSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlComment)">
            <summary>
            在前面添加节点的副本
            </summary>
            <param name="node">要在其前面添加副本的节点</param>
            <param name="comment">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyAfterSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlElement)">
            <summary>
            在后面添加节点的副本
            </summary>
            <param name="node">要在其后面添加副本的节点</param>
            <param name="element">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyBeforeSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlElement)">
            <summary>
            在前面添加节点的副本
            </summary>
            <param name="node">要在其前面添加副本的节点</param>
            <param name="element">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyAfterSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlNode)">
            <summary>
            在后面添加节点的副本
            </summary>
            <param name="node">要在其后面添加副本的节点</param>
            <param name="newNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyBeforeSelf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlNode)">
            <summary>
            在前面添加节点的副本
            </summary>
            <param name="node">要在其前面添加副本的节点</param>
            <param name="newNode">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyAfterSelf(Ivony.Html.IHtmlNode,System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            在后面添加节点的副本
            </summary>
            <param name="node">要在其后面添加副本的节点</param>
            <param name="newNodes">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.AddCopyBeforeSelf(Ivony.Html.IHtmlNode,System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            在前面添加节点的副本
            </summary>
            <param name="node">要在其前面添加副本的节点</param>
            <param name="newNodes">要创作副本的节点</param>
            <returns>添加后的节点</returns>
        </member>
        <member name="M:Ivony.Html.ExpandedAPI.ExpandedDomExtensions.Repeat(Ivony.Html.IHtmlElement,System.Int32)">
            <summary>
            将元素重复指定次数
            </summary>
            <param name="element">要重复的元素</param>
            <param name="count">要重复的次数</param>
            <returns>所产生的元素序列</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">重复的次数小于 0</exception>
            <remarks>
            若提供的 count 等于 0，则会从 DOM中 移除元素，若等于 1 则不做任何事情。
            </remarks>
        </member>
        <member name="T:Ivony.Html.LocationExtensions">
            <summary>
            提供节点定位、相对位置查询的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.LocationExtensions.IsAncestorOf(Ivony.Html.IHtmlContainer,Ivony.Html.IHtmlNode)">
            <summary>
            判断指定节点是否为指定容器的祖先。
            </summary>
            <param name="container">要判断的容器</param>
            <param name="node">要判断的节点</param>
            <returns>若节点位于容器的子代，则返回 true ，否则返回 false 。</returns>
            <remarks>注意此操作和IsDescendantOf并非互逆，当两个节点没有任何关系或者为同一节点时，两者皆返回false，此方法其实只是IsDescendantOf的参数颠倒版。</remarks>
        </member>
        <member name="M:Ivony.Html.LocationExtensions.IsDescendantOf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlContainer)">
            <summary>
            判断指定节点是否为指定容器的子代。
            </summary>
            <param name="node">要判断的节点</param>
            <param name="container">要判断的容器</param>
            <returns>若节点位于容器的子代，则返回 true ，否则返回 false 。</returns>
        </member>
        <member name="M:Ivony.Html.LocationExtensions.IsDescendantOf(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlCollection)">
            <summary>
            判断指定节点是否为指定容器的子代。
            </summary>
            <param name="node">要判断的节点</param>
            <param name="collection">要判断的容器</param>
            <returns>若节点位于容器的子代，则返回 true ，否则返回 false 。</returns>
            <remarks>
            出于性能考虑， IsDescendantOf( this node, container ) 方法检查节点的所有父级是否包含指定的容器，但对于IHtmlCollection来说，即使节点是其子代，其也不会在其父级中出现。
            所以这是针对 IHtmlCollection 的一个特定实现，而 IsDescendantOf( this IHtmlNode, IHtmlContainer ) 方法发现第二个参数是IHtmlCollection时，也会自动调用此重载
            </remarks>
        </member>
        <member name="M:Ivony.Html.LocationExtensions.PathOf(Ivony.Html.IHtmlElement)">
            <summary>
            获取元素相对于文档根的路径表达
            </summary>
            <param name="element">要获取路径的元素</param>
            <returns>路径表达式</returns>
        </member>
        <member name="M:Ivony.Html.LocationExtensions.PathOf(Ivony.Html.IHtmlElement,Ivony.Html.IHtmlContainer)">
            <summary>
            获取元素相对于指定元素的路径表达
            </summary>
            <param name="element">要获取路径的文档</param>
            <param name="ancestor">计算路径的起始对象</param>
            <returns>路径表达式</returns>
        </member>
        <member name="P:Ivony.Html.LocationExtensions.NodeLocationComparer">
            <summary>
            获取一个节点位置比较器，可以比较同一文档上节点在文档上出现的位置。
            </summary>
        </member>
        <member name="T:Ivony.Html.ParserExtension">
            <summary>
            提供 HTML 解析器的一些扩展
            </summary>
        </member>
        <member name="M:Ivony.Html.ParserExtension.LoadDocument(Ivony.Html.IHtmlParser,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            从指定的 URL 地址加载 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="uri">用于加载 HTML 文档的地址</param>
            <param name="defaultEncoding">默认编码</param>
            <param name="detectEncoding">是否应当检测编码，默认为true，如果检测到编码，则忽略默认编码设置，若设置为false，则强行使用默认编码。</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.ParserExtension.LoadDocument(Ivony.Html.IHtmlParser,System.Uri,System.Text.Encoding,System.Boolean)">
            <summary>
            从指定的 URL 地址加载 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="uri">用于加载 HTML 文档的地址</param>
            <param name="defaultEncoding">默认编码</param>
            <param name="detectEncoding">是否应当检测编码，默认为true，如果检测到编码，则忽略默认编码设置，若设置为false，则强行使用默认编码。</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.ParserExtension.LoadDocument(Ivony.Html.IHtmlParser,System.Net.WebResponse,System.Text.Encoding,System.Boolean)">
            <summary>
            从指定的 Web 响应数据地址加载 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="response">用于加载 HTML 文档的 Web 响应数据</param>
            <param name="detectEncoding">是否应当检测编码，默认为true，如果检测到编码，则忽略默认编码设置，若设置为false，则强行使用默认编码。</param>
            <param name="defaultEncoding">默认编码</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.ParserExtension.LoadDocument(Ivony.Html.IHtmlParser,System.IO.Stream,System.Text.Encoding,System.Uri)">
            <summary>
            从指定的流加载 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="stream">用于加载 HTML 文档的流</param>
            <param name="encoding">流的编码</param>
            <param name="uri">文档的 URL 地址</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.ParserExtension.LoadDocument(Ivony.Html.IHtmlParser,System.IO.TextReader,System.Uri)">
            <summary>
            从指定的文本读取器加载 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="reader">用于加载 HTML 文档的文本读取器</param>
            <param name="uri">文档的 URL 地址</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="M:Ivony.Html.ParserExtension.Parse(Ivony.Html.IHtmlParser,System.String)">
            <summary>
            从指定文本解析 HTML 文档
            </summary>
            <param name="parser">用于解析 HTML 文本的解析器</param>
            <param name="html">要解析的 HTML 文本</param>
            <returns>HTML 文档对象</returns>
        </member>
        <member name="T:Ivony.Html.Html5DraftSpecification">
            <summary>
            定义 HTML5 草案规范
            </summary>
            <remarks>此类型实例是只读且线程安全的</remarks>
        </member>
        <member name="T:Ivony.Html.HtmlElementAdapter">
            <summary>
            提供一个简单的 IHtmlAdapter 的实现，方便重写对指定元素的渲染规则。
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlRenderAdapter">
            <summary>
            定义一种 HTML 转换器，其可以自定义 HTML 节点的渲染规则。
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlRenderAdapter.Render(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlRenderContext)">
            <summary>
            尝试呈现指定的节点
            </summary>
            <param name="node">要渲染的节点</param>
            <param name="context">当前渲染上下文</param>
            <returns>是否进行了自定义渲染，若返回false，则使用默认渲染</returns>
            <remarks>
            若返回值为 false ，则系统其后会自行渲染这个节点，所以不应对 writer 写入一些东西后返回 false。
            </remarks>
        </member>
        <member name="M:Ivony.Html.HtmlElementAdapter.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            派生类重写此方法确定指定元素是否需要重写渲染规则
            </summary>
            <param name="element">要检测的元素</param>
            <returns>是否需要使用自定义渲染规则</returns>
        </member>
        <member name="M:Ivony.Html.HtmlElementAdapter.Render(Ivony.Html.IHtmlElement,Ivony.Html.IHtmlRenderContext)">
            <summary>
            派生类实现此方法提供自定义的渲染规则。
            </summary>
            <param name="element">要渲染的元素</param>
            <param name="context">渲染上下文</param>
        </member>
        <member name="P:Ivony.Html.HtmlElementAdapter.CssSelector">
            <summary>
            派生类重写此属性使用一个选择器来确定元素是否需要重写渲染规则
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlEncoding">
            <summary>
            提供 HTML 编码和解码。
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlEncode(System.String)">
            <summary>
            对字符串进行 HTML 编码。
            </summary>
            <param name="text">要编码的字符串</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            对字符串进行 HTML 编码。
            </summary>
            <param name="text">要编码的字符串</param>
            <param name="writer">用于写入编码后字符串的文本写入器</param>
            <remarks>注意！空白字符不会被自动编码</remarks>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlDecode(System.String)">
            <summary>
            对字符串进行 HTML 解码。
            </summary>
            <param name="htmlText">要解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            对字符串进行 HTML 解码。
            </summary>
            <param name="htmlText">要解码的字符串</param>
            <param name="writer">用于写入解码后字符串的文本写入器</param>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="text">要编码的字符串</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:Ivony.Html.HtmlEncoding.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="text">要编码的字符串</param>
            <param name="writer">用于写入编码后字符串的文本写入器</param>
        </member>
        <member name="T:Ivony.Html.IHtmlRenderContext">
            <summary>
            定义 HTML 渲染上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlRenderContext.Writer">
            <summary>
            用于输出渲染的文本输出器
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlRenderContext.RenderAdapters">
            <summary>
            获取当前上下文中所有的渲染代理
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlRenderContext">
            <summary>
            HTML 渲染上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlRenderContext.RenderAdapters">
            <summary>
            获取本次渲染所使用的渲染代理
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlRenderContext.Writer">
            <summary>
            用于输出渲染的文本输出器
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlRenderContext.Data">
            <summary>
            获取当前渲染上下文数据容器，这些数据仅在这一次上下文中有效
            </summary>
        </member>
        <member name="T:Ivony.Html.TextMode">
            <summary>
            文本模式
            </summary>
        </member>
        <member name="F:Ivony.Html.TextMode.Normal">
            <summary>普通，内容当作 HTML 来解释</summary>
        </member>
        <member name="F:Ivony.Html.TextMode.CData">
            <summary>CData，内容当作文本来解释</summary>
        </member>
        <member name="F:Ivony.Html.TextMode.Preformated">
            <summary>预格式化，不合并空白字符</summary>
        </member>
        <member name="F:Ivony.Html.TextMode.NonText">
            <summary>非文本，元素没有文本内容</summary>
        </member>
        <member name="T:Ivony.Html.IHtmlCollection">
            <summary>
            定义一个 HTML 节点收集器，其可以收纳 HTML 节点，但不会修改 HTML 节点的 Container 属性。
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlContainer">
            <summary>
            定义一个 HTML 内容容器，作为元素和文档的抽象
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlDomObject">
            <summary>
            表示一个 HTML DOM 的对象
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDomObject.RawObject">
            <summary>
            获取在原始文档对象树上的对象，如果原始对象不存在，返回null
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDomObject.RawHtml">
            <summary>
            获取 DOM 对象的原始 HTML，如果不支持，返回null
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDomObject.Document">
            <summary>
            获取 DOM 对象所属的文档
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlContainer.Nodes">
            <summary>
            获取所有子节点
            </summary>
            <returns>容器的子节点</returns>
        </member>
        <member name="P:Ivony.Html.IHtmlContainer.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlCollection">
            <summary>
            实现一个 HTML 节点收集器，其可以收纳不连续的 HTML 节点，且不会修改 HTML 节点的 Container 属性。
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.#ctor(Ivony.Html.IHtmlDocument)">
            <summary>
            创建空的 IHtmlCollection 对象
            </summary>
            <param name="document">要搜集节点所属的文档</param>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.#ctor(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlNode})">
            <summary>
            创建 IHtmlCollection 对象
            </summary>
            <param name="nodes">包含的节点</param>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.AddNode(Ivony.Html.IHtmlNode)">
            <summary>
            添加一个节点
            </summary>
            <param name="node">要添加的节点</param>
            <exception cref="T:System.InvalidOperationException">若节点不是位于同一文档</exception>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.Nodes">
            <summary>
            获取所有子节点
            </summary>
            <returns>容器的所有子节点</returns>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.Contains(Ivony.Html.IHtmlNode)">
            <summary>
            判断某个节点是否包含在收集器内
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.CopyTo(Ivony.Html.IHtmlNode[],System.Int32)">
            <summary>
            不支持此方法
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ivony.Html.HtmlCollection.Remove(Ivony.Html.IHtmlNode)">
            <summary>
            尝试从收集器中移除一个节点
            </summary>
            <param name="item">要移除的节点</param>
            <returns>是否移除成功，若节点不是顶层收纳节点，则不会成功</returns>
        </member>
        <member name="P:Ivony.Html.HtmlCollection.Document">
            <summary>
            获取节点收集器所属的文档
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlCollection.SyncRoot">
            <summary>
            获取用于同步的对象
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlCollection.Count">
            <summary>
            不支持此属性
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlCollection.IsReadOnly">
            <summary>
            此属性永远返回true
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlDomModifier">
            <summary>
            提供修改 DOM 结构的方法
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.AddElement(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            向指定容器中添加一个元素
            </summary>
            <param name="container">要添加元素的容器</param>
            <param name="index">添加的位置</param>
            <param name="name">元素名</param>
            <returns>添加好的元素</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.AddTextNode(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            向指定容器中添加一个文本节点
            </summary>
            <param name="container">要添加节点的容器</param>
            <param name="index">添加的位置</param>
            <param name="htmlText">HTML 文本</param>
            <returns>添加好的文本节点</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.AddComment(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            向指定容器中添加一个注释
            </summary>
            <param name="container">要添加注释的容器</param>
            <param name="index">添加的位置</param>
            <param name="comment">HTML 注释</param>
            <returns>添加好的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.AddSpecial(Ivony.Html.IHtmlContainer,System.Int32,System.String)">
            <summary>
            向指定容器添加一个特殊标签
            </summary>
            <param name="container">要添加特殊标签的容器</param>
            <param name="index">添加的位置</param>
            <param name="html">特殊标签的HTML</param>
            <returns>如果特殊标签作为一个节点而存在，则返回特殊节点，否则返回null。</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.RemoveNode(Ivony.Html.IHtmlNode)">
            <summary>
            从 DOM 中移除一个节点
            </summary>
            <param name="node">要移除的节点</param>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.AddAttribute(Ivony.Html.IHtmlElement,System.String,System.String)">
            <summary>
            为元素添加一个属性
            </summary>
            <param name="element">要添加属性的元素</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
            <returns>被添加的属性对象</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomModifier.RemoveAttribute(Ivony.Html.IHtmlAttribute)">
            <summary>
            从元素中移除一个属性
            </summary>
            <param name="attribute">要移除的属性</param>
        </member>
        <member name="T:Ivony.Html.INotifyDomChanged">
            <summary>
            HTML DOM 的实现通过实现此接口使得可以监视 HTML DOM 的变化。
            </summary>
        </member>
        <member name="E:Ivony.Html.INotifyDomChanged.HtmlDomChanged">
            <summary>
            当 HTML DOM 结构发生改变时引发此事件
            </summary>
        </member>
        <member name="T:Ivony.Html.ISynchronizedDomModifier">
            <summary>
            同步修改 DOM 结构的 DomModifier
            </summary>
        </member>
        <member name="P:Ivony.Html.ISynchronizedDomModifier.SyncRoot">
            <summary>
            同于同步操作的对象
            </summary>
        </member>
        <member name="T:Ivony.Html.IVersionControl">
            <summary>
            此接口用于框架，请勿在代码中使用。
            </summary>
        </member>
        <member name="P:Ivony.Html.IVersionControl.Version">
            <summary>
            获取文档当前的版本号，每修改一次文档该版本号便累加。
            </summary>
        </member>
        <member name="T:Ivony.Html.IVersionCacheContainer">
            <summary>
            此接口用于框架，请勿在代码中使用。
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlDocument">
            <summary>
            定义一个 HTML 文档
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDocument.DocumentUri">
            <summary>
            获取文档内容的统一资源位置
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDocument.DocumentDeclaration">
            <summary>
            获取文档的声明信息，可以是xml声明，也可以是DTD。如果不被支持，则返回null。
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDocument.FragmentManager">
            <summary>
            获取文档碎片的管理器，如不支持文档碎片，请返回 null 。
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDocument.DomModifier">
            <summary>
            获取修改 DOM 结构的修改器，如不支持修改 DOM 结构，请返回 null 。
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlDocument.HtmlSpecification">
            <summary>
            获取该文档应当遵循的 HTML 规范
            </summary>
        </member>
        <member name="P:Ivony.Html.IVersionCacheContainer.CurrenctVersionCache">
            <summary>
            获取当前版本缓存的数据。
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlDomChangedEventArgs">
            <summary>
            为 HTML DOM 节点事件提供参数
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlDomChangedEventArgs.#ctor(Ivony.Html.IHtmlNode,Ivony.Html.IHtmlContainer,Ivony.Html.HtmlDomChangedAction)">
            <summary>
            构建 HtmlDomChangedEventArgs 对象
            </summary>
            <param name="node">发生变化的节点</param>
            <param name="container">节点所属的容器</param>
            <param name="action">节点所发生的操作</param>
        </member>
        <member name="M:Ivony.Html.HtmlDomChangedEventArgs.#ctor(Ivony.Html.IHtmlAttribute,Ivony.Html.IHtmlElement,Ivony.Html.HtmlDomChangedAction)">
            <summary>
            构建 HtmlDomChangedEventArgs 对象
            </summary>
            <param name="attribute">发生变化的属性</param>
            <param name="element">属性所属的元素</param>
            <param name="action">属性所发生的操作</param>
        </member>
        <member name="P:Ivony.Html.HtmlDomChangedEventArgs.Node">
            <summary>
            引发事件的节点
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlDomChangedEventArgs.Attribute">
            <summary>
            引发事件的属性，如果是因为属性所引发事件。
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlDomChangedEventArgs.IsAttributeChanged">
            <summary>
            确认是否由属性修改所引发的事件
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlDomChangedEventArgs.Container">
            <summary>
            节点被移除前，节点所属的容器。
            </summary>
            <remarks>
            根据引发事件的是节点还是属性，Container 属性和 Node 属性的取值如下：
            若引发事件的是节点，则 Node 属性引用引发事件的节点， Container 属性引用引发事件之前节点所属的容器；
            若引发事件的是属性，则 Node 属性和 Container 属性都引用引发事件之前属性所属的元素。
            </remarks>
        </member>
        <member name="P:Ivony.Html.HtmlDomChangedEventArgs.Action">
            <summary>
            对节点或对象的操作
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlDomChangedAction">
            <summary>
            DOM 对象所发生的操作
            </summary>
        </member>
        <member name="F:Ivony.Html.HtmlDomChangedAction.Add">
            <summary>节点或对象被新增</summary>
        </member>
        <member name="F:Ivony.Html.HtmlDomChangedAction.Remove">
            <summary>节点或对象被移除</summary>
        </member>
        <member name="T:Ivony.Html.IHtmlFragment">
            <summary>
            定义 HTML 文档碎片，未分配节点的容器，文档碎片可以再次被分配到 DOM 上。
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlFragment.Into(Ivony.Html.IHtmlContainer,System.Int32)">
            <summary>
            将碎片插入到文档指定位置
            </summary>
            <param name="container">要插入的容器</param>
            <param name="index">要插入的位置</param>
            <returns>固定于文档上的节点集</returns>
        </member>
        <member name="T:Ivony.Html.IHtmlNodeCollection">
            <summary>
            定义高级 HTML 节点容器，通过实现该接口可以自定义 Descendants 等方法的行为模式
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlNodeCollection.Elements">
            <summary>
            获取所有的元素
            </summary>
            <returns>该节点集合中所有的元素</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlNodeCollection.DescendantElements">
            <summary>
            获取所有的子代元素
            </summary>
            <returns>该节点集合中所有的元素以及这些元素的子代元素</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlNodeCollection.DescendantNodes">
            <summary>
            获取所有的子代节点
            </summary>
            <returns>该节点集合中所有的节点以及所有的子代节点</returns>
        </member>
        <member name="T:Ivony.Html.IDataContainer">
            <summary>
            HTML DOM 模型的对象实现此接口声明自己可以保存一些额外的数据，一般而言，原生的 DOM 模型都应实现此接口以支持一些额外的功能。
            </summary>
        </member>
        <member name="P:Ivony.Html.IDataContainer.Data">
            <summary>
            额外的数据存放容器
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlParser">
            <summary>
            定义 HTML 文档解析器
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlParser.Parse(System.String,System.Uri)">
            <summary>
            分析 HTML 创建一个文档
            </summary>
            <param name="html">HTML 文本</param>
            <param name="uri">HTML 内容统一资源位置</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.IHtmlParser.DomProvider">
            <summary>
            获取用于构建 DOM 结构的 DOM 提供程序
            </summary>
        </member>
        <member name="T:Ivony.Html.NavigateExtensions">
            <summary>
            提供元素导航查询的扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Parent(Ivony.Html.IHtmlNode)">
            <summary>
            获取父元素
            </summary>
            <param name="node">要获取父元素的节点</param>
            <returns>父元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Elements(Ivony.Html.IHtmlContainer)">
            <summary>
            获取所有子元素
            </summary>
            <param name="container">要获取子元素的容器</param>
            <returns>容器的所有子元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Elements(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            获取符合条件的子元素
            </summary>
            <param name="container">要获取子元素的容器</param>
            <param name="selector">用来筛选子元素的元素选择器</param>
            <returns>符合条件的子元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Ancestors(Ivony.Html.IHtmlNode)">
            <summary>
            获取所有父代元素
            </summary>
            <param name="node">要获取父代元素集合的节点</param>
            <returns>节点的所有父代元素集合</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Ancestors(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            获取符合条件的父代元素
            </summary>
            <param name="node">要获取父代元素集合的节点</param>
            <param name="selector">用来筛选父代元素的元素选择器</param>
            <returns>节点的所有父代元素集合</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.AncestorsAndSelf(Ivony.Html.IHtmlElement)">
            <summary>
            获取所有的父代元素以及元素自身
            </summary>
            <param name="element">要获取父代元素及自身的元素</param>
            <returns>元素的所有父代元素和自身的集合</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Descendants(Ivony.Html.IHtmlContainer)">
            <summary>
            获取所有的子代元素
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <returns>容器所有的子代元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Descendants(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            获取符合条件的子代元素
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <param name="selector">用于筛选子代元素的选择器</param>
            <returns>符合选择器的容器的所有子代元素</returns>
            <remarks>与Find方法不同的是，Descendants方法的选择器会无限上溯，即当判断父代约束时，会无限上溯到文档根。而Find方法只会上溯到自身的子节点</remarks>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.DescendantNodes(Ivony.Html.IHtmlContainer)">
            <summary>
            获取所有的子代节点
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <returns>容器所有的子代节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.SiblingNodes(Ivony.Html.IHtmlNode)">
            <summary>
            获取所有的兄弟（同级）节点
            </summary>
            <param name="node">要获取兄弟节点的节点</param>
            <returns>所有的兄弟节点</returns>
            <exception cref="T:System.InvalidOperationException">如果节点不属于任何 HTML 容器</exception>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Siblings(Ivony.Html.IHtmlNode)">
            <summary>
            获取所有的兄弟（同级）元素节点
            </summary>
            <param name="node">要获取兄弟（同级）元素节点的节点</param>
            <returns>所有的兄弟（同级）元素节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Siblings(Ivony.Html.IHtmlNode,System.String)">
            <summary>
            获取符合条件的兄弟（同级）元素节点
            </summary>
            <param name="node">要获取兄弟（同级）元素节点的节点</param>
            <param name="selector">用于筛选元素的元素选择器</param>
            <returns>所有的兄弟（同级）元素节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.SiblingNodesBeforeSelf(Ivony.Html.IHtmlNode)">
            <summary>
            获取在自身之前的所有兄弟（同级）节点
            </summary>
            <param name="node">要获取之前的兄弟（同级）节点的节点</param>
            <returns>在这之后的所有兄弟（同级）节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.SiblingNodesAfterSelf(Ivony.Html.IHtmlNode)">
            <summary>
            获取在之后的所有兄弟（同级）节点
            </summary>
            <param name="node">要获取之后的兄弟（同级）节点的节点</param>
            <returns>之后的所有兄弟（同级）节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.SiblingsBeforeSelf(Ivony.Html.IHtmlNode)">
            <summary>
            获取在自身之前的所有兄弟（同级）元素节点
            </summary>
            <param name="node">要获取之前的兄弟（同级）元素节点的节点</param>
            <returns>在这之后的所有兄弟（同级）元素节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.SiblingsAfterSelf(Ivony.Html.IHtmlNode)">
            <summary>
            获取在之后的所有兄弟（同级）元素节点
            </summary>
            <param name="node">要获取之后的兄弟（同级）元素节点的节点</param>
            <returns>之后的所有兄弟（同级）元素节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.PreviousElement(Ivony.Html.IHtmlNode)">
            <summary>
            获取紧邻之前的元素
            </summary>
            <param name="node">要获取紧邻之前的元素的节点</param>
            <returns>紧邻当前节点的前一个元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.NextElement(Ivony.Html.IHtmlNode)">
            <summary>
            获取紧邻之后的元素
            </summary>
            <param name="node">要获取紧邻之后的元素的节点</param>
            <returns>紧邻当前节点的后一个元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.PreviousNode(Ivony.Html.IHtmlNode)">
            <summary>
            获取紧邻之前的节点
            </summary>
            <param name="node">要获取紧邻之前的元素的节点</param>
            <returns>紧邻当前节点的前一个节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.NextNode(Ivony.Html.IHtmlNode)">
            <summary>
            获取紧邻之后的节点
            </summary>
            <param name="node">要获取紧邻之后的元素的节点</param>
            <returns>紧邻当前节点的后一个节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Find(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的元素
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS 选择器</param>
            <returns>搜索到的符合要求的元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.NodesIndexOfSelf(Ivony.Html.IHtmlNode)">
            <summary>
            获取在兄弟节点中，自己的顺序位置
            </summary>
            <param name="node">要获取序号的节点</param>
            <returns>顺序位置</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.ElementsIndexOfSelf(Ivony.Html.IHtmlElement)">
            <summary>
            获取在兄弟元素中，自己的顺序位置
            </summary>
            <param name="element">要获取序号的元素</param>
            <returns>顺序位置</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Find(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String)">
            <summary>
            在元素集所有子代元素中使用 CSS 选择器选出符合要求的元素
            </summary>
            <param name="elements">作为选择范围的元素集</param>
            <param name="expression">CSS 选择器表达式</param>
            <returns>符合选择器的所有子代</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.FindSingle(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的唯一元素，如果有多个元素符合要求，则会引发异常。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <returns>搜索到的符合要求的唯一元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.FindFirst(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的第一个元素，若不存在任何符合要求的元素，则抛出异常。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <returns>搜索到的符合要求的第一个元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.FindLast(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的最后一个元素，若不存在任何符合要求的元素，则抛出异常。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <returns>搜索到的符合要求的最后一个元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Exists(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            确认在当前容器存在 CSS 选择器搜索符合要求的元素，若找到，则返回 true 。
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS选择器</param>
            <returns>是否存在符合要求的元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Find(Ivony.Html.IHtmlContainer,System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            从当前容器按照 CSS 选择器搜索符合要求的元素
            </summary>
            <param name="container">要搜索子代元素的容器</param>
            <param name="expression">CSS 选择器</param>
            <param name="action">要对元素执行的操作</param>
            <returns>搜索到的符合要求的元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Nodes(Ivony.Html.IHtmlContainer,System.Action{Ivony.Html.IHtmlNode})">
            <summary>
            获取所有子节点，并做处理
            </summary>
            <param name="container">要获取子节点的容器</param>
            <param name="action">要对子节点进行的操作</param>
            <returns>容器的子节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Elements(Ivony.Html.IHtmlContainer,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取所有元素，并做处理
            </summary>
            <param name="container">要获取子元素的容器</param>
            <param name="action">要对子元素进行的操作</param>
            <returns>容器的子元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Elements(Ivony.Html.IHtmlContainer,System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取所有子元素
            </summary>
            <param name="container">要获取子元素的容器</param>
            <param name="selector">用来筛选子元素的元素选择器</param>
            <param name="action">要对子元素执行的操作</param>
            <returns>容器的所有子元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Descendants(Ivony.Html.IHtmlContainer,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取所有的子代元素，并作相应处理
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <param name="action">要对子代元素执行的操作</param>
            <returns>容器所有的子代元素</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Descendants(Ivony.Html.IHtmlContainer,System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取符合条件的子代元素，并作相应处理
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <param name="selector">用于筛选子代元素的选择器</param>
            <param name="action">要对子代元素执行的操作</param>
            <returns>符合选择器的容器的所有子代元素</returns>
            <remarks>与Find方法不同的是，Descendants方法的选择器会无限上溯，即当判断父代约束时，会无限上溯到文档根。而Find方法只会上溯到自身的子节点</remarks>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.DescendantNodes(Ivony.Html.IHtmlContainer,System.Action{Ivony.Html.IHtmlNode})">
            <summary>
            获取所有的子代节点，并作相应处理
            </summary>
            <param name="container">要获取子代元素的容器对象</param>
            <param name="action">要对子代元素执行的操作</param>
            <returns>容器所有的子代节点</returns>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Siblings(Ivony.Html.IHtmlNode,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取所有的兄弟（同级）元素，并作相应处理
            </summary>
            <param name="node">要获取兄弟元素的节点</param>
            <param name="action">要对兄弟元素执行的操作</param>
            <returns>所有的兄弟（同级）元素节点</returns>
            <exception cref="T:System.InvalidOperationException">如果节点不属于任何 HTML 容器</exception>
        </member>
        <member name="M:Ivony.Html.NavigateExtensions.Siblings(Ivony.Html.IHtmlNode,System.String,System.Action{Ivony.Html.IHtmlElement})">
            <summary>
            获取符合条件的兄弟（同级）元素节点，并作相应处理
            </summary>
            <param name="node">要获取兄弟（同级）元素节点的节点</param>
            <param name="selector">用于筛选元素的元素选择器</param>
            <param name="action">要对兄弟元素执行的操作</param>
            <returns>所有的兄弟（同级）元素节点</returns>
        </member>
        <member name="T:Ivony.Html.EnumerableWrapper">
            <summary>
            提供一个 IEnumerable 对象的包装
            </summary>
        </member>
        <member name="M:Ivony.Html.EnumerableWrapper.GetEnumerable">
            <summary>
            获取被包装的可枚举序列
            </summary>
            <returns>可枚举序列</returns>
        </member>
        <member name="T:Ivony.Html.EnumerableWrapper`1">
            <summary>
            提供一个 IEnumerable&lt;T&gt; 对象的包装
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="M:Ivony.Html.EnumerableWrapper`1.GetEnumerable">
            <summary>
            获取被包装的可枚举序列
            </summary>
            <returns>可枚举序列</returns>
        </member>
        <member name="T:Ivony.Html.HtmlDocumentWrapper">
            <summary>
            IHtmlDocument 的包裹类
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlDocumentWrapper.Document">
            <summary>
            被包装的 IHtmlDocument对象
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlElementWrapper">
            <summary>
            IHtmlElement 的包裹类
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlNodeWrapper">
            <summary>
            IHtmlNode 的包裹类
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlNode">
            <summary>
            定义 HTML 文档节点
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlNode.Container">
            <summary>
            获取节点的容器
            </summary>
        </member>
        <member name="M:Ivony.Html.HtmlNodeWrapper.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>当前对象的哈希代码。</returns>
        </member>
        <member name="M:Ivony.Html.HtmlNodeWrapper.Equals(System.Object)">
            <summary>
            确定指定的 System.Object 是否等于当前的 System.Object。
            </summary>
            <param name="obj">与当前的 System.Object 进行比较的 System.Object。</param>
            <returns>如果指定的 System.Object 等于当前的 System.Object，则为 true；否则为 false。</returns>
        </member>
        <member name="P:Ivony.Html.HtmlNodeWrapper.Node">
            <summary>
            被包装的 IHtmlNode 对象
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlElement">
            <summary>
            定义 HTML 元素
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlElement.Attributes">
            <summary>
            获取元素的所有属性
            </summary>
            <returns>元素的所有属性</returns>
        </member>
        <member name="P:Ivony.Html.IHtmlElement.Name">
            <summary>
            元素名
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlElementWrapper.Element">
            <summary>
            被包装的 IHtmlElement 对象
            </summary>
        </member>
        <member name="P:Ivony.Html.HtmlElementWrapper.Node">
            <summary>
            提供被包装的 IHtmlNode 对象，用于实现 HtmlNodeWrapper
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlAttribute">
            <summary>
            HTML 元素属性
            </summary>
            <remarks>
            与XML和HTML标准DOM模型不同，在Jumony里面，Attribute不被认为是一个节点（不从IHtmlNode继承）。
            这是因为IHtmlNode被定义为位置敏感的DOM对象，而Attribute是非位置敏感的（在元素中定义的顺序无关紧要）。
            这与LINQ to XML的模型是一致的。
            </remarks>
        </member>
        <member name="P:Ivony.Html.IHtmlAttribute.Element">
            <summary>
            获取属性所属的元素
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlAttribute.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlAttribute.AttributeValue">
            <summary>
            属性值
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlAttributeCollection">
            <summary>
            属性容器，提供 Get 和 Set 方法改善属性操作性能。
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlAttributeCollection.Get(System.String)">
            <summary>
            根据属性名检索属性
            </summary>
            <param name="name">属性名</param>
            <returns>属性对象</returns>
        </member>
        <member name="T:Ivony.Html.IHtmlComment">
            <summary>
            定义一个 HTML 注释，或应当被忽略的 HTML 内容
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlComment.Comment">
            <summary>
            注释文本
            </summary>
        </member>
        <member name="T:Ivony.Html.HtmlCommentRenderType">
            <summary>
            HTML 注释的类别
            </summary>
        </member>
        <member name="F:Ivony.Html.HtmlCommentRenderType.Normal">
            <summary>普通注释，使用 &lt;!--内容--&gt; 表示，输出时自动格式化</summary>
        </member>
        <member name="F:Ivony.Html.HtmlCommentRenderType.AsIs">
            <summary>原样输出，输出时保持原样输出，但不会被任何解析器理解为文本</summary>
        </member>
        <member name="F:Ivony.Html.HtmlCommentRenderType.Unable">
            <summary>不会输出的注释，仅存在于 DOM 结构中，无法输出</summary>
        </member>
        <member name="T:Ivony.Html.IHtmlFragmentManager">
            <summary>
            定义文档碎片管理器，用于分析和创建文档碎片
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlFragmentManager.CreateFragment">
            <summary>
            创建一个文档碎片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.IHtmlFragmentManager.ParseFragment(System.String)">
            <summary>
            分析并创建一个文档碎片
            </summary>
            <param name="html">要分析用于创建文档碎片的 HTML</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.IHtmlFragmentManager.Document">
            <summary>
            文档碎片提供程序所属的文档
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlFragmentManager.AllFragments">
            <summary>
            获取所有尚未分配的文档碎片
            </summary>
        </member>
        <member name="T:Ivony.Html.IHtmlDomProvider">
            <summary>
            用于创建 HTML DOM 的提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.CreateDocument(System.Uri)">
            <summary>
            创建一个空白文档
            </summary>
            <param name="uri">文档的统一资源路径</param>
            <returns>空白文档</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.SetHtmlSpecification(Ivony.Html.IHtmlDocument,System.String)">
            <summary>
            设置文档所采用的文档规范
            </summary>
            <param name="document">文档</param>
            <param name="specificationType">所采用的文档规范名称</param>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.AddElement(Ivony.Html.IHtmlContainer,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            向指定容器中添加一个元素
            </summary>
            <param name="container">要添加元素的容器</param>
            <param name="name">元素名</param>
            <param name="attributes">元素属性</param>
            <returns>添加好的元素</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.AddTextNode(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            向指定容器中添加一个文本节点
            </summary>
            <param name="container">要添加节点的容器</param>
            <param name="htmlText">HTML 文本</param>
            <returns>添加好的文本节点</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.AddComment(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            向指定容器中添加一个注释
            </summary>
            <param name="container">要添加注释的容器</param>
            <param name="comment">HTML 注释内容</param>
            <returns>添加好的注释节点</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.AddSpecial(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            向指定容器添加一个特殊标签
            </summary>
            <param name="container">要添加特殊标签的容器</param>
            <param name="html">特殊标签的 HTML</param>
            <returns>如果特殊标签作为一个节点而存在，则返回特殊节点，否则返回null。</returns>
        </member>
        <member name="M:Ivony.Html.IHtmlDomProvider.CompleteDocument(Ivony.Html.IHtmlDocument)">
            <summary>
            完成文档创建
            </summary>
            <param name="document">正在被创建的文档</param>
            <returns>创建好的文档对象</returns>
        </member>
        <member name="T:Ivony.Html.IHtmlRenderableNode">
            <summary>
            要自定义呈现逻辑的 HTML 节点所需要实现的接口
            </summary>
        </member>
        <member name="M:Ivony.Html.IHtmlRenderableNode.Render(Ivony.Html.IHtmlRenderContext)">
            <summary>
            呈现这个节点
            </summary>
            <param name="context">呈现渲染上下文</param>
        </member>
        <member name="T:Ivony.Html.IHtmlSpecial">
            <summary>
            定义 HTML 特殊节点，其不是 HTML 的组成部分，例如代码块
            </summary>
            <remarks>
            若此节点最终能生成 HTML 内容，应同时实现 IHtmlRenderable 接口。
            特殊节点不被视为HTML的一部分，不认为会产生任何文本，也不自动生成HTML，而使用RawHtml原样输出
            </remarks>
        </member>
        <member name="T:Ivony.Html.IHtmlTextNode">
            <summary>
            定义 HTML 文本节点
            </summary>
        </member>
        <member name="P:Ivony.Html.IHtmlTextNode.HtmlText">
            <summary>
            HTML 文本
            </summary>
        </member>
        <member name="T:Ivony.Html.Regulars">
            <summary>
            定义所有用于分析 HTML 和 CSS 选择器的正则表达式
            </summary>
        </member>
        <member name="F:Ivony.Html.Regulars.dquoteTextPattern">
            <summary>匹配用双引号标识的引用文本</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.squoteTextPattern">
            <summary>匹配用单引号标识的引用文本</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.quoteTextPattern">
            <summary>匹配用引号标识的引用文本</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.relativeExpressionPattern">
            <summary>匹配CSS层叠关系选择符的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.relativeExpressionPatternNoGroup">
            <summary>匹配CSS层叠关系选择符的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.attributeExpressionPattern">
            <summary>匹配CSS属性选择器的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.attributeExpressionPatternNoGroup">
            <summary>匹配CSS属性选择器的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.pseudoClassPattern">
            <summary>匹配CSS伪类选择器的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.pseudoClassPatternNoGroup">
            <summary>匹配CSS伪类选择器的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.elementExpressionPattern">
            <summary>匹配CSS元素选择器的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.elementExpressionPatternNoGroup">
            <summary>匹配CSS元素选择器的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.cssCasecadingSelectorPattern">
            <summary>匹配CSS层叠选择器的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.cssCasecadingSelectorPatternNoGroup">
            <summary>匹配CSS层叠选择器的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.cssSelectorPattern">
            <summary>匹配CSS选择器的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.cssSelectorPatternNoGroup">
            <summary>匹配CSS选择器的正则表达式，这是不带分组名的版本，用于组合其他正则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.integerPattern">
            <summary>匹配任意十进制无符号整数</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.decimalPattern">
            <summary>匹配任意十进制无符号小数</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.whiteSpaceSeparatorRegex">
            <summary>匹配空白字符用于分割的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.styleSettingPattern">
            <summary>匹配 CSS 样式设置</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.styleRulePattern">
            <summary>匹配 CSS 样式规则</summary>
        </member>
        <member name="F:Ivony.Html.Regulars.styleSheetPattern">
            <summary>匹配 CSS 样式表</summary>
        </member>
        <member name="M:Ivony.Html.Regulars.ResolveEscape(System.String)">
            <summary>
            转换转义字符
            </summary>
            <param name="str">要执行转换的字符串</param>
            <returns>转换后的结果</returns>
            <remarks>此方法用于将字符串中的转义字符如"\t"替换为转义后的形式，例如"  "（跳格）。</remarks>
        </member>
        <member name="M:Ivony.Html.Regulars.FindCaptures(System.Text.RegularExpressions.Capture,System.Text.RegularExpressions.Group)">
            <summary>
            查找捕获组在指定捕获内存在的捕获
            </summary>
            <param name="capture">要限定查找范围的捕获</param>
            <param name="group">要查找的捕获组</param>
            <returns>找到的捕获</returns>
            <remarks>这个扩展方法用于从一个大的捕获组的匹配中分离出子捕获组的匹配。</remarks>
        </member>
        <member name="T:Ivony.Html.CacheableSelector">
            <summary>
            可以对筛选结果进行缓存的 CSS 选择器
            </summary>
        </member>
        <member name="M:Ivony.Html.CacheableSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合选择器要求（此方法会自动缓存结果）
            </summary>
            <param name="element">要检查的元素</param>
            <returns>是否符合选择器的要求</returns>
        </member>
        <member name="M:Ivony.Html.CacheableSelector.IsEligibleCore(Ivony.Html.IHtmlElement)">
            <summary>
            派生类实现此方法检查元素是否符合选择器要求
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CacheableSelector.CreateCacheableWrapper(Ivony.Html.ISelector)">
            <summary>
            创建现有 CSS 选择器的自动缓存包装
            </summary>
            <param name="selector">已有的 CSS 选择器</param>
            <returns>对已有选择器的自动缓存的包装</returns>
        </member>
        <member name="T:Ivony.Html.CssCasecadingSelector">
            <summary>
            CSS层叠选择器
            </summary>
            <remarks>
            层叠选择器的表达式分析过程是从左至右，而处理则是从右至左，采取从左至右的方式分析主要考虑到正则工作模式和效率问题。但由于处理方式是从右至左。
            简单的说只有一个元素选择器所构成的层叠选择器，其元素选择器是位于右边的。
            </remarks>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.#ctor(Ivony.Html.CssRelativeSelector,Ivony.Html.ISelector)">
            <summary>
            创建 CSS 层叠选择器对象
            </summary>
            <param name="relativeSelector">关系选择器</param>
            <param name="lastSelector">附加的最后一个选择器</param>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.Create(Ivony.Html.ISelector,System.Char,Ivony.Html.ISelector)">
            <summary>
            创建层叠选择器实例
            </summary>
            <param name="leftSelector">左选择器</param>
            <param name="combinator">结合符</param>
            <param name="rightSelector">右选择器</param>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.Combine(Ivony.Html.CssRelativeSelector,Ivony.Html.CssCasecadingSelector)">
            <summary>
            合并关系选择器和层叠选择器
            </summary>
            <param name="relativeSelector">关系选择器</param>
            <param name="selector">层叠选择器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.Combine(Ivony.Html.CssRelativeSelector,Ivony.Html.CssRelativeSelector)">
            <summary>
            合并两个关系选择器
            </summary>
            <param name="left">左关系选择器</param>
            <param name="right">右关系选择器</param>
            <returns>合并后的关系选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.CreateRelativeSelector(Ivony.Html.ISelector,System.Char)">
            <summary>
            创建关系选择器
            </summary>
            <param name="leftSelector">左选择器</param>
            <param name="combanitor">关系结合符</param>
            <returns>关系选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合选择条件
            </summary>
            <param name="element">要检查的元素</param>
            <returns>是否符合选择条件</returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.ToString">
            <summary>
            返回表示当前选择器的表达式
            </summary>
            <returns>表示当前选择器的表达式</returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.Create(Ivony.Html.CssRelativeSelector,Ivony.Html.ISelector)">
            <summary>
            创建层叠选择器
            </summary>
            <param name="relativeSelector">前置关系选择器</param>
            <param name="selector">右选择器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CssCasecadingSelector.Create(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String)">
            <summary>
            创建层叠选择器
            </summary>
            <param name="elements">作为范畴限定的元素集</param>
            <param name="expression">选择器表达式</param>
            <returns>层叠选择器</returns>
        </member>
        <member name="P:Ivony.Html.CssCasecadingSelector.RelativeSelector">
            <summary>
            关系选择器
            </summary>
        </member>
        <member name="P:Ivony.Html.CssCasecadingSelector.LastSelector">
            <summary>
            最后一个选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.CssAttributeSelector">
            <summary>
            CSS属性选择器
            </summary>
            <remarks>
            此类型实例是线程安全的
            </remarks>
        </member>
        <member name="F:Ivony.Html.CssAttributeSelector.whiteSpaceSeparatorRegex">
            <summary>匹配空白字符用于分割的正则表达式</summary>
        </member>
        <member name="M:Ivony.Html.CssAttributeSelector.#ctor(System.String,System.String,System.String)">
            <summary>
            创建 CssAttributeSelector 对象
            </summary>
            <param name="name">属性名</param>
            <param name="comparison">比较符</param>
            <param name="value">属性值模板</param>
        </member>
        <member name="M:Ivony.Html.CssAttributeSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合选择条件
            </summary>
            <param name="element">要检查的元素</param>
            <returns>是否符合条件</returns>
        </member>
        <member name="M:Ivony.Html.CssAttributeSelector.ToString">
            <summary>
            返回表示当前选择器的表达式
            </summary>
            <returns>表示当前选择器的表达式</returns>
        </member>
        <member name="T:Ivony.Html.CssElementsRestrictionSelector">
            <summary>
            限制为仅匹配特定一些些元素的 CSS 选择器，主要用于作为范畴限定。
            </summary>
        </member>
        <member name="M:Ivony.Html.CssElementsRestrictionSelector.#ctor(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement})">
            <summary>
            创建 CssElementsRestrictionSelector 对象
            </summary>
            <param name="elements">特定的元素</param>
        </member>
        <member name="M:Ivony.Html.CssElementsRestrictionSelector.ToString">
            <summary>
            获取选择器的字符串表达形式
            </summary>
            <returns>总是返回 "#elements#" 字符串</returns>
        </member>
        <member name="T:Ivony.Html.CssMultipleSelector">
            <summary>
            多重（并列）选择器
            </summary>
        </member>
        <member name="M:Ivony.Html.CssMultipleSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            判断一个元素是否符合选择器要求
            </summary>
            <param name="element">要判断的元素</param>
            <returns>是否符合要求</returns>
        </member>
        <member name="M:Ivony.Html.CssMultipleSelector.ToString">
            <summary>
            返回表示当前选择器的表达式
            </summary>
            <returns>表示当前选择器的表达式</returns>
        </member>
        <member name="T:Ivony.Html.CssParser">
            <summary>
            CSS 分析器，用于分析 CSS 选择器表达式
            </summary>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseSelector(System.String)">
            <summary>
            从选择器表达式创建选择器对象
            </summary>
            <param name="expression">选择器表达式</param>
            <returns>CSS 选择器对象</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseElementSelector(System.String)">
            <summary>
            从选择器表达式创建元素选择器
            </summary>
            <param name="expression">选择器表达式</param>
            <returns>CSS 元素选择器对象</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.Create(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            创建带范畴限定的选择器
            </summary>
            <param name="expression">选择器表达式</param>
            <param name="scope">范畴限定，上溯时不超出此范畴</param>
            <returns>带范畴限定的层叠选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseSelector(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析并创建选择器对象
            </summary>
            <param name="enumerator">用于读取选择器表达式的枚举器</param>
            <returns>选择器对象</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.CreateCasecadingSelector(Ivony.Html.ISelector,System.Char,Ivony.Html.CssElementSelector)">
            <summary>
            创建层叠选择器
            </summary>
            <param name="leftSelector">左选择器</param>
            <param name="combanitor">结合符</param>
            <param name="rightSelector">右选择器</param>
            <returns>层叠选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.SkipWhiteSpace(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            跳过当前位置所有的空白字符
            </summary>
            <param name="enumerator">字符枚举器</param>
            <returns>是否跳过了任何空白字符</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseElementSelector(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析元素选择器
            </summary>
            <param name="enumerator">字符枚举器</param>
            <returns>解析好的元素选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.CreateElementSelector(System.String,Ivony.Html.CssAttributeSelector[],Ivony.Html.ICssPseudoClassSelector[])">
            <summary>
            创建元素选择器
            </summary>
            <param name="elementName">元素名</param>
            <param name="cssAttributeSelectors">CSS属性选择器</param>
            <param name="cssPseudoClassSelectors">CSS伪类选择器</param>
            <returns>元素选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseAttributeSelector(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析属性选择器
            </summary>
            <param name="enumerator">字符枚举器</param>
            <returns>属性选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.CreateAttributeSelector(System.String)">
            <summary>
            创建属性选择器
            </summary>
            <param name="attriuteName">属性名</param>
            <returns>属性选择器，此选择器确定属性是否存在</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.CreateAttributeSelector(System.String,System.String,System.String)">
            <summary>
            创建属性选择器
            </summary>
            <param name="attributeName">属性名</param>
            <param name="compare">比较符</param>
            <param name="value">属性参考值</param>
            <returns>属性选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParsePsedoclassSelector(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析伪类选择器
            </summary>
            <param name="enumerator">字符枚举器</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CssParser.RegisterPseudoClassProvider(System.String,Ivony.Html.ICssPseudoClassProvider)">
            <summary>
            注册自定义 CSS 伪类选择器提供程序
            </summary>
            <param name="name">伪类名</param>
            <param name="provider">伪类选择器提供程序</param>
        </member>
        <member name="M:Ivony.Html.CssParser.EnsureNext(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            确保当前位置尚未达到字符串末尾
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseQuoteText(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析引用字符串
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.CssParser.ParseName(Ivony.Html.CssParser.CharEnumerator)">
            <summary>
            解析名称
            </summary>
            <param name="enumerator"></param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.SelectorExtensions">
            <summary>
            提供一系列静态和扩展方法来辅助使用 CSS 选择器。
            </summary>
        </member>
        <member name="M:Ivony.Html.SelectorExtensions.Filter(Ivony.Html.ISelector,System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement})">
            <summary>
            使用选择器从元素集中筛选出符合选择器要求的元素
            </summary>
            <param name="selector">选择器</param>
            <param name="source">源元素集</param>
            <returns>筛选结果</returns>
        </member>
        <member name="M:Ivony.Html.SelectorExtensions.FilterBy(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},Ivony.Html.ISelector)">
            <summary>
            使用选择器从元素集中筛选出符合选择器要求的元素
            </summary>
            <param name="source">源元素集</param>
            <param name="selector">选择器</param>
            <returns>筛选结果</returns>
        </member>
        <member name="M:Ivony.Html.SelectorExtensions.FilterBy(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement},System.String)">
            <summary>
            使用选择器从元素集中筛选出符合选择器要求的元素
            </summary>
            <param name="source">源元素集</param>
            <param name="selector">选择器</param>
            <returns>筛选结果</returns>
        </member>
        <member name="M:Ivony.Html.SelectorExtensions.IsEligibleBuffered(Ivony.Html.ISelector,Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合指定选择器要求，并缓存结果于元素当前文档版本
            </summary>
            <param name="selector">选择器</param>
            <param name="element">元素</param>
            <returns>是否符合选择器要求</returns>
        </member>
        <member name="T:Ivony.Html.CssElementSelector">
            <summary>
            CSS元素选择器
            </summary>
            <remarks>
            此类型实例是线程安全的。
            </remarks>
        </member>
        <member name="M:Ivony.Html.CssElementSelector.#ctor(System.String,Ivony.Html.CssAttributeSelector[],Ivony.Html.ICssPseudoClassSelector[])">
            <summary>
            创建CSS元素选择器
            </summary>
            <param name="name">元素名</param>
            <param name="attributes">属性选择器</param>
            <param name="pseudoClasses">伪类选择器</param>
        </member>
        <member name="M:Ivony.Html.CssElementSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检查一个元素是否符合选择条件
            </summary>
            <param name="element">要检查的元素</param>
            <returns>是否符合</returns>
        </member>
        <member name="M:Ivony.Html.CssElementSelector.Filter(System.Collections.Generic.IEnumerable{Ivony.Html.IHtmlElement})">
            <summary>
            从元素集合中筛选出符合条件的元素
            </summary>
            <param name="source">要筛选的元素集合</param>
            <returns>筛选结果</returns>
        </member>
        <member name="M:Ivony.Html.CssElementSelector.ToString">
            <summary>
            返回表示当前选择器的表达式
            </summary>
            <returns>表示当前选择器的表达式</returns>
        </member>
        <member name="P:Ivony.Html.CssElementSelector.ElementName">
            <summary>
            获取元素名限定条件，如没有限制，则返回"*"
            </summary>
        </member>
        <member name="T:Ivony.Html.ICssPseudoClassProvider">
            <summary>
            自定义伪类提供程序，实现此接口为CSS选择器添加自定义伪类支持
            </summary>
        </member>
        <member name="M:Ivony.Html.ICssPseudoClassProvider.CreateSelector(System.String,System.String)">
            <summary>
            创建伪类选择器
            </summary>
            <param name="name">伪类名</param>
            <param name="args">伪类参数表达式</param>
            <returns>伪类选择器</returns>
        </member>
        <member name="T:Ivony.Html.ICssPseudoClassSelector">
            <summary>
            所有CSS伪类选择器需要实现的接口
            </summary>
            <remarks>
            对实现者的说明：CSS所有选择器实例都应当是线程安全的，请在实现时满足这一限制
            </remarks>
        </member>
        <member name="M:Ivony.Html.ICssPseudoClassSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            判断一个元素是否符合选择器要求
            </summary>
            <param name="element">要判断的元素</param>
            <returns>是否符合要求</returns>
        </member>
        <member name="T:Ivony.Html.InternalPseudoClassProvider">
            <summary>
            内置伪类选择器
            </summary>
        </member>
        <member name="F:Ivony.Html.InternalPseudoClassProvider.NthPseudoClass.integerPattern">
            <summary>匹配任意十进制无符号整数</summary>
        </member>
        <member name="M:Ivony.Html.InternalPseudoClassProvider.NthPseudoClass.Check(System.Int32)">
            <summary>
            检查元素所处的索引位置是否符合参数表达式要求。
            </summary>
            <param name="index">所处的索引位置</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.CssRelativeSelector">
            <summary>
            CSS 关系选择器基类
            </summary>
        </member>
        <member name="M:Ivony.Html.CssRelativeSelector.#ctor(Ivony.Html.ISelector)">
            <summary>
            创建 CssRelativeSelector 对象
            </summary>
            <param name="leftSelector"></param>
        </member>
        <member name="M:Ivony.Html.CssRelativeSelector.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合选择器
            </summary>
            <param name="element">要检验的元素</param>
            <returns>是否符合选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssRelativeSelector.IsEligible(Ivony.Html.ISelector,Ivony.Html.IHtmlElement)">
            <summary>
            检查元素是否符合选择器
            </summary>
            <param name="leftSelector">左选择器</param>
            <param name="element">要检验的元素</param>
            <returns>是否符合选择器</returns>
        </member>
        <member name="M:Ivony.Html.CssRelativeSelector.ToString">
            <summary>
            重写 ToString 方法输出选择器表达式
            </summary>
            <returns>选择器表达式形式</returns>
        </member>
        <member name="P:Ivony.Html.CssRelativeSelector.LeftSelector">
            <summary>
            获取左选择器
            </summary>
        </member>
        <member name="P:Ivony.Html.CssRelativeSelector.Combinator">
            <summary>
            结合符
            </summary>
        </member>
        <member name="T:Ivony.Html.CssParentRelativeSelector">
            <summary>
            父级关系选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.CssAncetorRelativeSelector">
            <summary>
            父代关系选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.CssPreviousRelativeSelector">
            <summary>
            毗邻关系选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.CssSiblingsRelativeSelector">
            <summary>
            兄弟元素选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.NegationPseudoClass">
            <summary>
            否定伪类实现
            </summary>
        </member>
        <member name="M:Ivony.Html.NegationPseudoClass.#ctor(Ivony.Html.CssElementSelector)">
            <summary>
            构建 NegationPseudoClass 对象
            </summary>
            <param name="elementSelector">元素选择器</param>
        </member>
        <member name="M:Ivony.Html.NegationPseudoClass.IsEligible(Ivony.Html.IHtmlElement)">
            <summary>
            检测是否满足伪类选择器
            </summary>
            <param name="element">要检测的元素</param>
            <returns>是否满足选择器</returns>
        </member>
        <member name="M:Ivony.Html.NegationPseudoClass.ToString">
            <summary>
            获取否定伪类的字符串表达形式
            </summary>
            <returns>否定伪类的字符串表达形式</returns>
        </member>
        <member name="T:Ivony.Html.CssStyleProperty">
            <summary>
            定义一个样式设置
            </summary>
        </member>
        <member name="M:Ivony.Html.CssStyleProperty.#ctor(System.String,System.String)">
            <summary>
            创建 CssSetting 对象
            </summary>
            <param name="name">CSS 样式名</param>
            <param name="value">CSS 样式值</param>
        </member>
        <member name="M:Ivony.Html.CssStyleProperty.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            创建 CssSetting 对象
            </summary>
            <param name="name">CSS 样式名</param>
            <param name="value">CSS 样式值</param>
            <param name="important">是否覆盖其他样式设置</param>
        </member>
        <member name="M:Ivony.Html.CssStyleProperty.ToString">
            <summary>
            重写 ToString 方法，输出 CSS 属性的字符串设置形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.CssStyleProperty.Name">
            <summary>
            样式名称
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyleProperty.Value">
            <summary>
            设置的样式值
            </summary>
        </member>
        <member name="P:Ivony.Html.CssStyleProperty.Important">
            <summary>
            是否覆盖其他的样式设置
            </summary>
        </member>
        <member name="T:Ivony.Html.Styles.StyleClassManager">
            <summary>
            样式类管理器
            </summary>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.GetStyleClassManager(Ivony.Html.IHtmlElement)">
            <summary>
            获取指定元素的样式类管理器
            </summary>
            <param name="element">要获取样式类管理器的元素</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.EnsureUpdated">
            <summary>
            确保跟踪到了最新的样式类信息。
            </summary>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Add(System.String)">
            <summary>
            添加一个样式类
            </summary>
            <param name="className">类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Add(System.String[])">
            <summary>
            添加多个样式类
            </summary>
            <param name="classNames">要添加的样式类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加多个样式类
            </summary>
            <param name="classNames">要添加的样式类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Remove(System.String)">
            <summary>
            移除一个样式类
            </summary>
            <param name="className">类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Remove(System.String[])">
            <summary>
            移除多个样式类
            </summary>
            <param name="classNames">要移除的样式类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除多个样式类
            </summary>
            <param name="classNames">要添加的样式类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Clear">
            <summary>
            清除元素所有的样式类
            </summary>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Toggle(System.String)">
            <summary>
            切换样式类（如果没有设置这个样式类则设置，否则移除这个样式类）
            </summary>
            <param name="className">类名</param>
            <returns>样式类管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.UpdateClass">
            <summary>
            更新 class 属性
            </summary>
        </member>
        <member name="M:Ivony.Html.Styles.StyleClassManager.Contains(System.String)">
            <summary>
            检测是否包含指定名称的样式类
            </summary>
            <param name="className">类名</param>
            <returns>是否包含指定名称的样式类</returns>
        </member>
        <member name="T:Ivony.Html.Styles.StyleManager">
            <summary>
            提供元素CSS样式管理
            </summary>
        </member>
        <member name="M:Ivony.Html.Styles.StyleManager.GetStyleManager(Ivony.Html.IHtmlElement)">
            <summary>
            获取指定元素的样式管理器
            </summary>
            <param name="element">要获取样式管理器的元素</param>
            <returns>获取的样式管理器</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleManager.GetValue(System.String)">
            <summary>
            获取样式设置值
            </summary>
            <param name="name">样式名</param>
            <returns>样式设置值</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleManager.SetValue(System.String,System.String)">
            <summary>
            设置样式值
            </summary>
            <param name="name">样式名</param>
            <param name="value">样式值（若为 null 则移除样式）</param>
            <returns>样式管理器自身</returns>
        </member>
        <member name="M:Ivony.Html.Styles.StyleManager.EnsureStyle">
            <summary>
            确保当前跟踪的样式是最新的
            </summary>
        </member>
        <member name="M:Ivony.Html.Styles.StyleManager.Clear">
            <summary>
            清除所有样式
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.SynchronizedCollection`1">
            <summary>
            实现一个线程安全的容器
            </summary>
            <typeparam name="T">容器项类型</typeparam>
        </member>
        <member name="P:Ivony.Html.SynchronizedCollection`1.Count">
            <summary>
            容器所拥有项数量
            </summary>
        </member>
        <member name="P:Ivony.Html.SynchronizedCollection`1.Items">
            <summary>
            内部的容器
            </summary>
        </member>
        <member name="P:Ivony.Html.SynchronizedCollection`1.SyncRoot">
            <summary>
            用于同步的对象
            </summary>
        </member>
        <member name="P:Ivony.Html.SynchronizedCollection`1.Item(System.Int32)">
            <summary>
            获取指定索引处的元素
            </summary>
            <param name="index">元素索引</param>
            <returns>指定索引位置的元素</returns>
        </member>
    </members>
</doc>
